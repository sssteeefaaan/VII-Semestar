
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu May 15 13:36:22 CEST 2008
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Thu May 15 13:36:22 CEST 2008
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\004\012\000\002\002\004\000\002\004" +
    "\012\000\002\004\011\000\002\004\010\000\002\004\007" +
    "\000\002\004\006\000\002\004\005\000\002\004\004\000" +
    "\002\004\003\000\002\005\004\000\002\005\004\000\002" +
    "\007\004\000\002\007\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\017\003\000\002\017\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\006\000" +
    "\002\013\006\000\002\013\005\000\002\013\004\000\002" +
    "\014\006\000\002\014\006\000\002\014\005\000\002\014" +
    "\004\000\002\015\005\000\002\015\005\000\002\015\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\004\000\002\024\003\000\002\024\003" +
    "\000\002\016\010\000\002\016\010\000\002\016\007\000" +
    "\002\016\006\000\002\016\005\000\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\003\005\004\006\001\002\000\004\002" +
    "\143\001\002\000\004\002\ufff8\001\002\000\006\003\007" +
    "\021\010\001\002\000\004\002\ufff9\001\002\000\006\003" +
    "\012\030\011\001\002\000\012\003\uffee\022\uffee\023\uffee" +
    "\026\uffee\001\002\000\004\002\ufffa\001\002\000\010\003" +
    "\016\022\015\026\014\001\002\000\006\003\142\030\141" +
    "\001\002\000\006\003\017\025\020\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\ufffc\001\002\000\006\003\022" +
    "\005\021\001\002\000\006\003\126\030\011\001\002\000" +
    "\004\002\ufffd\001\002\000\006\003\025\010\026\001\002" +
    "\000\006\003\124\027\125\001\002\000\004\002\ufffe\001" +
    "\002\000\016\003\040\010\026\012\027\013\041\014\036" +
    "\030\037\001\002\000\006\003\116\021\117\001\002\000" +
    "\012\003\uffe2\011\uffe2\016\uffe2\025\uffe2\001\002\000\010" +
    "\003\uffe5\011\uffe5\025\uffe5\001\002\000\012\003\uffe4\011" +
    "\uffe4\016\uffe4\025\uffe4\001\002\000\012\003\uffe3\011\uffe3" +
    "\016\uffe3\025\uffe3\001\002\000\010\003\110\011\112\025" +
    "\111\001\002\000\012\003\uffe0\011\uffe0\016\uffe0\025\uffe0" +
    "\001\002\000\014\003\077\021\051\030\052\031\055\032" +
    "\046\001\002\000\006\003\072\024\073\001\002\000\014" +
    "\003\uffe9\011\uffe9\016\uffe9\025\uffe9\027\uffe9\001\002\000" +
    "\006\003\043\021\044\001\002\000\012\003\uffe1\011\uffe1" +
    "\016\uffe1\025\uffe1\001\002\000\012\003\uffd8\011\uffd8\016" +
    "\uffd8\025\uffd8\001\002\000\014\003\053\021\051\030\052" +
    "\031\055\032\046\001\002\000\022\003\uffd2\011\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\065\022\uffd2\025\uffd2\001\002" +
    "\000\022\003\uffc8\011\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\022\uffc8\025\uffc8\001\002\000\022\003\uffcd\011\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022\uffcd\025\uffcd\001" +
    "\002\000\010\003\071\017\062\022\070\001\002\000\014" +
    "\003\057\021\051\030\052\031\055\032\046\001\002\000" +
    "\022\003\uffce\011\uffce\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\022\uffce\025\uffce\001\002\000\012\003\uffd9\011\uffd9\016" +
    "\uffd9\025\uffd9\001\002\000\022\003\uffcf\011\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\022\uffcf\025\uffcf\001\002\000" +
    "\022\003\uffc9\011\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\022\uffc9\025\uffc9\001\002\000\010\003\061\017\062\022" +
    "\060\001\002\000\022\003\uffca\011\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\022\uffca\025\uffca\001\002\000\022\003" +
    "\uffcc\011\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc" +
    "\025\uffcc\001\002\000\022\003\uffcb\011\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\022\uffcb\025\uffcb\001\002\000\014" +
    "\003\063\021\051\030\052\031\055\032\046\001\002\000" +
    "\020\003\uffd3\011\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3" +
    "\025\uffd3\001\002\000\022\003\uffd4\011\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\065\022\uffd4\025\uffd4\001\002\000\014" +
    "\003\067\021\051\030\052\031\055\032\046\001\002\000" +
    "\022\003\uffd1\011\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\022\uffd1\025\uffd1\001\002\000\022\003\uffd0\011\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0\025\uffd0\001\002" +
    "\000\012\003\uffdb\011\uffdb\016\uffdb\025\uffdb\001\002\000" +
    "\012\003\uffda\011\uffda\016\uffda\025\uffda\001\002\000\012" +
    "\003\uffd5\011\uffd5\016\uffd5\025\uffd5\001\002\000\014\003" +
    "\075\021\051\030\052\031\055\032\046\001\002\000\014" +
    "\003\uffd7\011\uffd7\016\uffd7\017\062\025\uffd7\001\002\000" +
    "\012\003\uffd6\011\uffd6\016\uffd6\025\uffd6\001\002\000\010" +
    "\003\101\015\100\017\062\001\002\000\012\003\uffc2\011" +
    "\uffc2\016\uffc2\025\uffc2\001\002\000\016\003\103\010\026" +
    "\012\027\013\041\014\036\030\037\001\002\000\012\003" +
    "\uffc3\011\uffc3\016\uffc3\025\uffc3\001\002\000\006\003\104" +
    "\016\105\001\002\000\012\003\uffc4\011\uffc4\016\uffc4\025" +
    "\uffc4\001\002\000\012\003\uffc5\011\uffc5\016\uffc5\025\uffc5" +
    "\001\002\000\016\003\107\010\026\012\027\013\041\014" +
    "\036\030\037\001\002\000\012\003\uffc7\011\uffc7\016\uffc7" +
    "\025\uffc7\001\002\000\012\003\uffc6\011\uffc6\016\uffc6\025" +
    "\uffc6\001\002\000\026\003\uffea\010\026\011\uffea\012\027" +
    "\013\041\014\036\016\uffea\025\uffea\027\uffea\030\037\001" +
    "\002\000\016\003\114\010\026\012\027\013\041\014\036" +
    "\030\037\001\002\000\014\003\uffeb\011\uffeb\016\uffeb\025" +
    "\uffeb\027\uffeb\001\002\000\010\003\uffe8\011\uffe8\025\uffe8" +
    "\001\002\000\010\003\uffe7\011\uffe7\025\uffe7\001\002\000" +
    "\010\003\uffe6\011\uffe6\025\uffe6\001\002\000\012\003\uffdc" +
    "\011\uffdc\016\uffdc\025\uffdc\001\002\000\006\003\121\030" +
    "\120\001\002\000\006\003\123\022\122\001\002\000\012" +
    "\003\uffdd\011\uffdd\016\uffdd\025\uffdd\001\002\000\012\003" +
    "\uffdf\011\uffdf\016\uffdf\025\uffdf\001\002\000\012\003\uffde" +
    "\011\uffde\016\uffde\025\uffde\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002\000\006\003\ufff6\010\ufff6" +
    "\001\002\000\010\003\ufff7\010\ufff7\030\011\001\002\000" +
    "\010\003\ufff4\010\ufff4\030\ufff4\001\002\000\010\003\132" +
    "\023\133\026\014\001\002\000\010\003\ufff1\010\ufff1\030" +
    "\ufff1\001\002\000\010\003\136\006\134\007\137\001\002" +
    "\000\010\003\uffed\010\uffed\030\uffed\001\002\000\010\003" +
    "\ufff3\010\ufff3\030\ufff3\001\002\000\010\003\ufff2\010\ufff2" +
    "\030\ufff2\001\002\000\010\003\uffec\010\uffec\030\uffec\001" +
    "\002\000\010\003\ufff5\010\ufff5\030\ufff5\001\002\000\012" +
    "\003\ufff0\022\ufff0\023\ufff0\026\ufff0\001\002\000\012\003" +
    "\uffef\022\uffef\023\uffef\026\uffef\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\004\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\022\001\001\000" +
    "\010\007\126\010\127\023\130\001\001\000\002\001\001" +
    "\000\004\006\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\041\011\033\012\030\013\031\014\032" +
    "\015\027\016\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\075\021" +
    "\044\022\053\024\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\047\021\044\022\053\024\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\055\021\044\022\053\024\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\063\022" +
    "\053\024\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\065\024\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\073\021\044\022\053\024\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\041\012\101\013\031\014" +
    "\032\015\027\016\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\041\012\105\013\031\014\032\015\027\016\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\041\012" +
    "\114\013\031\014\032\015\027\016\034\001\001\000\016" +
    "\006\041\012\112\013\031\014\032\015\027\016\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\137\023\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



   public int errNo = 0;
   public int warnNo = 0;
   
   SymbolTable symbolTable;
   
   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   java_cup.runtime.Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo == 0 && parser.warnNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo 
		         + " Broj upozorenja: " + parser.warnNo );
	  }
	  catch( Exception e )
	  {
		   System.out.println(e);
	  }
   }
   
   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name + 
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }
   
   public void syntax_error(Symbol cur_token)
   {
   	  
   }
   
   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }
   
   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IfNar ::= IF error 
            {
              Object RESULT = null;
		
             System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje '('.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IfNar ::= IF Izraz error 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
              if ( i.tkind != Type.INTEGER )
              {
              	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	   "Uslov ne moze biti tipa " + i.name );
              	parser.errNo++;
              }
             System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje kljucna rec 'then'.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfNar ::= IF Izraz THEN error 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
              if ( i.tkind != Type.INTEGER )
              {
              	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	   "Uslov ne moze biti tipa " + i.name );
              	parser.errNo++;
              }
              System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje naredba u 'then' grani.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfNar ::= IF Izraz THEN Naredba error 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		
              if ( i.tkind != Type.INTEGER )
              {
              	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	   "Uslov ne moze biti tipa " + i.name );
              	parser.errNo++;
              }
             System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje kljucna rec 'else'.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IfNar ::= IF Izraz THEN Naredba ELSE error 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		
              if ( i.tkind != Type.INTEGER )
              {
              	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	   "Uslov ne moze biti tipa " + i.name );
              	parser.errNo++;
              }
             System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje naredba u 'else' grani.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IfNar ::= IF Izraz THEN Naredba ELSE Naredba 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		
              if ( i.tkind != Type.INTEGER )
              {
              	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	   "Uslov ne moze biti tipa " + i.name );
              	parser.errNo++;
              }
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*IfNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Konstanta ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                 RESULT = new Constant( parser.symbolTable.getType( "char" ), c );
              
              CUP$MPParser$result = new java_cup.runtime.Symbol(18/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Konstanta ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                 RESULT = new Constant( parser.symbolTable.getType( "integer" ), c );
              
              CUP$MPParser$result = new java_cup.runtime.Symbol(18/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FIzraz ::= LEFTPAR error 
            {
              Type RESULT = null;
		
              System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	"Nekorektan izraz.");
              parser.errNo++;
              RESULT = parser.symbolTable.getType( "unknown" );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FIzraz ::= LEFTPAR Izraz error 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
              System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
              	"Nedostaje ')'.");
              parser.errNo++;
              RESULT = i;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FIzraz ::= LEFTPAR Izraz RIGHTPAR 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
           	   RESULT = i;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FIzraz ::= Konstanta 
            {
              Type RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant k = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              RESULT = k.type;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FIzraz ::= ID 
            {
              Type RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		      Variable var = parser.symbolTable.getVar( ime );
		      if ( var == null )
		      {
		      	System.out.println( "Ggreska u liniji " + parser.getLine() + 
		      		": promenljiva " + ime + " nije deklarisana.");
		      	RESULT = parser.symbolTable.getType( "unknown" );
		      	parser.errNo++;
		      }
		      else 
		      {
		      	RESULT = var.type;
		      	if ( var.last_def == -1 )
		      	{
		      		System.out.println( "Ggreska u liniji " + parser.getLine() + 
		      			": promenljiva " + ime + " nije inicijalizovana.");
		      		parser.errNo++;
		      	}
		        var.last_use = parser.getLine();
		      }
		   
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*FIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PIzraz ::= FIzraz 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              RESULT = i;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*PIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PIzraz ::= PIzraz MUL error 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
              if ( i.tkind != Type.INTEGER )
              {
              	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	   "Operator * se ne moze primeniti nad operandom tipa " + i.name );
              	parser.errNo++;
              }
              System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	"Nekorektan izraz.");
              parser.errNo++;
              RESULT = parser.symbolTable.getType( "integer" );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*PIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PIzraz ::= PIzraz MUL FIzraz 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
           	  if ( i1.tkind != Type.INTEGER || i2.tkind != Type.INTEGER )
              {
              	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	   "Operator * se ne moze primeniti nad operandima tipa " + 
              	   i1.name + " i " + i2.name );
              	parser.errNo++;
              }
              RESULT = parser.symbolTable.getType( "integer" );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*PIzraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Izraz ::= PIzraz 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              RESULT = i;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Izraz ::= Izraz PLUS error 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
             if ( i.tkind != Type.INTEGER )
             {
               	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	   "Operator + se ne moze primeniti nad operandom tipa " + i.name );
              	parser.errNo++;
             }
             System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
             	"Nekorektan izraz.");
             parser.errNo++;
             RESULT = parser.symbolTable.getType( "integer" );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Izraz ::= Izraz PLUS PIzraz 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
             if ( i1.tkind != Type.INTEGER || i2.tkind != Type.INTEGER )
              {
              	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	   "Operator + se ne moze primeniti nad operandima tipa " + 
              	   i1.name + " i " + i2.name );
              	parser.errNo++;
              }
              RESULT = parser.symbolTable.getType( "integer" );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Izraz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Dodela ::= ID error 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
              Variable var = parser.symbolTable.getVar( ime );
		      if ( var == null )
		      {
		      	System.out.println( "Ggreska u liniji " + parser.getLine() + 
		      		": promenljiva " + ime + " nije deklarisana.");
		      	parser.errNo++;
		      }
		      else 
		         var.last_def = parser.getLine();
              System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	"Nedostaje ':='.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Dodela*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Dodela ::= ID ASSIGN error 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
              Variable var = parser.symbolTable.getVar( ime );
		      if ( var == null )
		      {
		      	System.out.println( "Ggreska u liniji " + parser.getLine() + 
		      		": promenljiva " + ime + " nije deklarisana.");
		      	parser.errNo++;
		      }
		      else 
		         var.last_def = parser.getLine();
              System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
              	"Nekorektan izraz.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Dodela*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Dodela ::= ID ASSIGN Izraz 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              Variable var = parser.symbolTable.getVar( ime );
		      if ( var == null )
		      {
		      	System.out.println( "Ggreska u liniji " + parser.getLine() + 
		      		": promenljiva " + ime + " nije deklarisana.");
		      	parser.errNo++;
		      }
		      else 
		      {
		         var.last_def = parser.getLine();
		         if ( var.type.tkind != i.tkind )
		         {
		            System.out.println( "Ggreska u liniji " + parser.getLine() + 
		      		   ": Neslaganje tipa u naredbi dodele." );
		      	    parser.errNo++;
		         }
		      }
		   
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Dodela*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Izlaz ::= WRITE error 
            {
              Object RESULT = null;
		
             System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje '('.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Izlaz ::= WRITE LEFTPAR error 
            {
              Object RESULT = null;
		
             System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
             	"Nekorektan izraz.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Izlaz ::= WRITE LEFTPAR Izraz error 
            {
              Object RESULT = null;
		
             System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
             	"Nedostaje ')'.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Izlaz ::= WRITE LEFTPAR Izraz RIGHTPAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Izlaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ulaz ::= READ error 
            {
              Object RESULT = null;
		
            System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
            	"Nedostaje '('.");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ulaz ::= READ LEFTPAR error 
            {
              Object RESULT = null;
		
            System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
            	"Nedostaje ime promenljive.");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ulaz ::= READ LEFTPAR ID error 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            Variable var = parser.symbolTable.getVar( ime );
		    if ( var == null )
		    {
		      	System.out.println( "Ggreska u liniji " + parser.getLine() + 
		      		": promenljiva " + ime + " nije deklarisana.");
		      	parser.errNo++;
		    }
		    else
		         var.last_def = parser.getLine();
            System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
            	"Nedostaje ')'.");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ulaz ::= READ LEFTPAR ID RIGHTPAR 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
              Variable var = parser.symbolTable.getVar( ime );
		      if ( var == null )
		      {
		      	System.out.println( "Ggreska u liniji " + parser.getLine() + 
		      		": promenljiva " + ime + " nije deklarisana.");
		      	parser.errNo++;
		      }
		      else
		         var.last_def = parser.getLine();
		 
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Ulaz*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Naredba ::= IfNar 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Naredba ::= Blok 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Naredba ::= Dodela 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Naredba ::= Izlaz 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Naredba ::= Ulaz 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Naredba*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NizNar ::= Naredba 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NizNar ::= NizNar error Naredba 
            {
              Object RESULT = null;
		
              System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
              	"Nedostaje ';'." );
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NizNar ::= NizNar SEMI error 
            {
              Object RESULT = null;
		
              System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
              	"Nedostaje naredba nakon simbola ';'." );
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NizNar ::= NizNar SEMI Naredba 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NizNar*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Blok ::= BEGIN error 
            {
              Object RESULT = null;
		
         	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
         		"Telo bloka je nekorektno");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Blok*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Blok ::= BEGIN NizNar error 
            {
              Object RESULT = null;
		
         	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
         		"Nezavrsen blok (nedostaje kljucna rec 'end').");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Blok*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Blok ::= BEGIN NizNar END 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Blok*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tip ::= CHAR 
            {
              Type RESULT = null;
		
           RESULT = parser.symbolTable.getType( "char" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tip ::= INTEGER 
            {
              Type RESULT = null;
		
           RESULT = parser.symbolTable.getType( "integer" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NizImena ::= ID 
            {
              ArrayList RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                RESULT = new ArrayList();
                RESULT.add( ime );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NizImena ::= NizImena COMMA error 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
             	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
             		"Nedostaje ime promenljive nakon simbola ','" );
            	parser.errNo++;
            	RESULT = niz;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NizImena ::= NizImena COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
			 	RESULT = niz;
			 	RESULT.add( ime );
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*NizImena*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Deklaracija ::= NizImena error 
            {
              Object RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
                    Type t = parser.symbolTable.getType( "unknown" );
					for ( int i=0; i<niz.size(); i++ )
					{
					   String ime = ( String ) niz.get(i);
					   
					   if ( ! parser.symbolTable.addVar( ime, t ) )
					   {
					   	 System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
                   			"Promenljiva " + ime + " je vec deklarisana." );
            		     parser.errNo++;
					   }
					}
                   System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
                   		"Nedostaje simbol ':'." );
            		parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Deklaracija*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Deklaracija ::= NizImena DOTDOT error 
            {
              Object RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
					Type t = parser.symbolTable.getType( "unknown" );
					for ( int i=0; i<niz.size(); i++ )
					{
					   String ime = (String) niz.get(i);
					   
					   if ( ! parser.symbolTable.addVar( ime, t ) )
					   {
					   	 System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
                   			"Promenljiva " + ime + " je vec deklarisana." );
            		     parser.errNo++;
					   }
					}
                   System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
                   		"Nekorektno ime tipa." );
            		parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Deklaracija*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Deklaracija ::= NizImena DOTDOT Tip 
            {
              Object RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
					for ( int i=0; i<niz.size(); i++ )
					{
					   String ime = (String) niz.get(i);
					   
					   if ( ! parser.symbolTable.addVar( ime, t ) )
					   {
					   	 System.out.println( "Ggreska u liniji " + parser.getLine() + ": " + 
                   			"Promenljiva " + ime + " je vec deklarisana." );
            		     parser.errNo++;
					   }
					}
				
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Deklaracija*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NizDekl ::= Deklaracija 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NizDekl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NizDekl ::= NizDekl Deklaracija 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NizDekl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeklProm ::= VAR error 
            {
              Object RESULT = null;
		
             	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
             		"Nedostaju deklaracije promenljivih nakon kljucne veci 'var'.");
            	parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*DeklProm*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeklProm ::= VAR NizDekl 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*DeklProm*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Program ::= error 
            {
              Object RESULT = null;
		
            	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
            		"Nedostaje kljucna rec 'program' na pocetku.");
            	parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Program ::= PROGRAM error 
            {
              Object RESULT = null;
		
            	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
            		"Nedostaje '('.");
            	parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Program ::= PROGRAM LEFTPAR error 
            {
              Object RESULT = null;
		
            	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
            		"Nedostaju argumenti programa.");
            	parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Program ::= PROGRAM LEFTPAR NizImena error 
            {
              Object RESULT = null;
		
            	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
            		"Nedostaje ')'.");
            	parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR error 
            {
              Object RESULT = null;
		
            	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
            		"Nedostaje ';'.");
            	parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI error 
            {
              Object RESULT = null;
		
            	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
            		"Nedostaju deklaracije promenljivih.");
            	parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI DeklProm error 
            {
              Object RESULT = null;
		
            	System.out.println("Ggreska u liniji " + parser.getLine() + ": " + 
            		"Telo programa je nekorektno.");
            	parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI DeklProm Blok error 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
               System.out.println( "Nedostaje '.' na kraju programa" );
               parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM LEFTPAR NizImena RIGHTPAR SEMI DeklProm Blok DOT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

