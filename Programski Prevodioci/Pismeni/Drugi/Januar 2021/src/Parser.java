
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 18 21:08:57 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Tue Jan 18 21:08:57 CET 2022
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\003\006\000\002\003" +
    "\006\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\002\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\005\006\000\002\005\005\000\002" +
    "\005\005\000\002\005\004\000\002\007\003\000\002\007" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\004\012\004\001\002\000\006\003\007\010" +
    "\010\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufffe\001\002\000\014\003\ufffb\004" +
    "\012\005\014\007\015\011\ufffb\001\002\000\010\003\ufff8" +
    "\006\ufff8\011\ufff8\001\002\000\012\003\ufff2\006\ufff2\007" +
    "\ufff2\011\ufff2\001\002\000\010\003\ufffd\006\027\011\ufffd" +
    "\001\002\000\012\003\ufff3\006\ufff3\007\ufff3\011\ufff3\001" +
    "\002\000\010\003\023\004\012\005\014\001\002\000\006" +
    "\003\020\011\021\001\002\000\006\003\ufffc\011\ufffc\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\000\001\002" +
    "\000\006\003\024\007\025\001\002\000\006\003\ufff4\011" +
    "\ufff4\001\002\000\006\003\ufff5\011\ufff5\001\002\000\012" +
    "\003\ufff6\004\012\005\014\011\ufff6\001\002\000\006\003" +
    "\ufff7\011\ufff7\001\002\000\010\003\031\004\012\005\014" +
    "\001\002\000\010\003\ufffa\006\ufffa\011\ufffa\001\002\000" +
    "\010\003\ufff9\006\ufff9\011\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\015\005\016\006\012\007\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\025\001" +
    "\001\000\002\001\001\000\004\007\027\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    this.symbolTable = new SymbolTable();

    }


    public int errorNo = 0;
    public int warrningNo = 0;
    public SymbolTable symbolTable;

    public static void main( String[] args )
    {
        try{
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new Lexer( file );
            Parser parser = new Parser( scanner );
            parser.parse();
            if ( parser.errorNo == 0 && parser.errorNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errorNo 
		         + " Broj upozorenja: " + parser.warrningNo );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public int getLine()
    {
        return (( Lexer ) getScanner()).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONST ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("int"), c);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CONST*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONST ::= STRINGCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType("string"), c);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CONST*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Range ::= COLON error 
            {
              Object RESULT = null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": Nedotaje opseg!");
            parser.errorNo++;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Range*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Range ::= COLON CONST error 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje : u definiciji opsega!");
            parser.errorNo++;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Range*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Range ::= COLON CONST COLON 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            if(c.type.tkind != parser.symbolTable.getType("int").tkind){
                System.out.println("Greska u liniji " + parser.getLine() + ": Opseg vrednosti u listi mora biti celi broj!");
                    parser.errorNo++;
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Range*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Range ::= COLON CONST COLON CONST 
            {
              Object RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Constant c1 = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Constant c2 = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            int kind = parser.symbolTable.getType("int").tkind;
            if(c1.type.tkind != kind || c2.type.tkind != kind){
                System.out.println("Greska u liniji " + parser.getLine() + ": Opseg vrednosti u listi mora biti celi broj!");
                    parser.errorNo++;
            }
            else if(Integer.parseInt((String)c1.value) > Integer.parseInt((String)c2.value)){
                System.out.println("Greska u liniji " + parser.getLine() + ": Prvi indeks nije prethodnik drugog indeksa!");
                parser.errorNo++;
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*Range*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // List ::= CONST 
            {
              ArrayList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new ArrayList<Constant>();
            RESULT.add(c);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // List ::= List COMMA error 
            {
              ArrayList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje indeks nakon zareza!");
            parser.errorNo++;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // List ::= List COMMA CONST 
            {
              ArrayList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            boolean flag = false;
            for(int i = 0; i < l.size(); i++){
                if(flag = ((Constant)l.get(i)).value.equals(c.value)){
                    System.out.println("Greska u liniji " + parser.getLine() + ": Indeksi u listi ne smeju imati iste vrednosti!");
                    parser.errorNo++;
                    break;
                }
                if(((Constant)l.get(i)).type.tkind != c.type.tkind){
                    System.out.println("Greska u liniji " + parser.getLine() + ": Indeksi u listi moraju biti istog tipa!");
                    parser.errorNo++;
                    break;
                }
            }
            if(!flag){
                l.add(c);
                RESULT = l;
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*List*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Indices ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Indices*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Indices ::= Range 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Indices*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Indices ::= List 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*Indices*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SliceOperation ::= ID error 
            {
              Object RESULT = null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": Nevalidna inicijalizacija splice operacije!");
			parser.errorNo++;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*SliceOperation*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SliceOperation ::= ID OPENPAR Indices error 
            {
              Object RESULT = null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje zatvorena uglasta zagrada!");
			parser.errorNo++;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*SliceOperation*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SliceOperation ::= ID OPENPAR Indices CLOSEPAR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(1/*SliceOperation*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SliceOperation EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

