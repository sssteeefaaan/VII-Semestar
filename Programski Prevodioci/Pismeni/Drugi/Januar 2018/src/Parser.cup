import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import SymbolTable.*;


parser code{:
    public int errorNumber;
    public int warrningNumber;
    public SymbolTable symbolTable;

    public static void main( String[] args )
    {
        try{
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new Lexer( file );
            Parser parser = new Parser( scanner );
            parser.parse();
            if ( parser.errorNumber == 0 && parser.warrningNumber == 0 )
		    	System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   	else
		     	System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errorNumber + " Broj upozorenja: " + parser.warrningNumber );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public int getLine()
    {
        return (( Lexer ) getScanner()).getLine();
    }
:}


init with {:
	this.errorNumber = 0;
	this.warrningNumber = 0;
    this.symbolTable = new SymbolTable();
:}


non terminal EnumType;
terminal ENUM, COLON, OPENCURLY, CLOSECURLY, INT, STRING, COMMA, INTCONST, STRINGCONST;
terminal String ID;
non terminal ArrayList ConstantList;
non terminal ConstantDefinition ConstantDefinition;
non terminal Constant Const;
non terminal Type Type;

start with EnumType;

EnumType ::= ENUM ID:id COLON Type: t OPENCURLY ConstantList:cl CLOSECURLY
            {:
                Variable var = parser.symbolTable.getVar( id );
                boolean flag = false;
                if( var != null )
                {
                    // Nemam pojma da li su na ovo mislili, nema logike svejedno, jer se radi scope na nivou enuma
                    // wtf je sta god da je
                    System.out.println( "Greska u liniji " + parser.getLine() + ": Postoji vec definisan tip!");
                    parser.errorNumber++;
                }
                else
                {
                    for(String key : ( ( HashMap<String, ConstantDefinition> ) cl.get( 0 ) ).keySet() )
					{
                        if( t.tkind != ( ( HashMap<String, ConstantDefinition> ) cl.get( 0 ) ).get( key ).constant.type.tkind )
                        {
                            System.out.println( "Greska u liniji " + parser.getLine() + ": Tip clana se ne poklapa sa tipom enuma!");
                            parser.errorNumber++;
                        }
                    }
                }
            :}
            | ENUM ID COLON Type OPENCURLY ConstantList error
            {:
                System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje zatvorena zagrada!");
                parser.errorNumber++;
            :}
            | ENUM ID COLON Type error
            {:
                System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje lista konstanti!");
                parser.errorNumber++;
            :}
            | ENUM ID error
            {:
                System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje definicija enuma!");
                parser.errorNumber++;
            :}
            | ENUM error
            {:
                System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje identifikator!");
                parser.errorNumber++;
            :}
            ;

Type ::= INT
        {:
            RESULT = parser.symbolTable.getType( "int" );
        :}
        | STRING
        {:
            RESULT = parser.symbolTable.getType( "string" );
        :}
        ;

ConstantList ::= ConstantDefinition: cd
        {:
            RESULT = new ArrayList<HashMap>(){{
                add(new HashMap<String, ConstantDefinition>());
                add(new HashMap<Object, ConstantDefinition>());
            }};
            ( ( HashMap< String, ConstantDefinition > ) RESULT.get(0) ).put( cd.id, cd );
            ( ( HashMap< Object, ConstantDefinition > ) RESULT.get(1) ).put( cd.constant.value, cd );
        :}
        | ConstantList: cl COMMA ConstantDefinition: cd
        {:
            if( ( ( HashMap< String, ConstantDefinition > ) cl.get(0) ).containsKey(cd.id) )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": Identifikator vec iskoriscen!");
                parser.errorNumber++;
            }
            else if( ( ( HashMap< Object, ConstantDefinition > ) cl.get(1) ).containsKey( cd.constant.value ) )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": Vrednost vec iskoriscena!");
                parser.errorNumber++;
            }
            else
            {
                ( ( HashMap< String, ConstantDefinition > ) cl.get(0) ).put( cd.id, cd );
                ( ( HashMap< Object, ConstantDefinition > ) cl.get(1) ).put( cd.constant.value, cd );
                RESULT = cl;
            }
        :}
        | ConstantList COMMA error
        {:
            System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje definicija konstanti!");
            parser.errorNumber++;
        :}
        | ConstantList error
        {:
            System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje zapeta!");
            parser.errorNumber++;
        :}
        ;

ConstantDefinition ::= ID: id COLON Const: c
                    {:
                        RESULT = new ConstantDefinition(id, c);
                    :}
                    | ID COLON error
                    {:
                        System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje konstanta!");
                        parser.errorNumber++;
                    :}
                    | ID error
                    {:
                        System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaju :!");
                        parser.errorNumber++;
                    :}
                    ;

Const ::= INTCONST: c
        {:
            RESULT = new Constant( parser.symbolTable.getType( "int" ), c );
        :}
        | STRINGCONST: c
        {:
            RESULT = new Constant( parser.symbolTable.getType( "string" ), c );
        :}
        ;