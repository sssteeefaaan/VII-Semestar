
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jan 19 13:09:36 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Wed Jan 19 13:09:36 CET 2022
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\003\011\000\002\003" +
    "\011\000\002\003\007\000\002\003\005\000\002\003\004" +
    "\000\002\007\003\000\002\007\003\000\002\004\003\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\004\000\002\006" +
    "\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\004\005\001\002\000\004\002\035\001" +
    "\002\000\006\003\007\015\006\001\002\000\006\003\010" +
    "\005\011\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffd\001\002\000\006\010\014\011\012\001\002\000\006" +
    "\003\ufffa\006\ufffa\001\002\000\006\003\015\006\016\001" +
    "\002\000\006\003\ufffb\006\ufffb\001\002\000\004\002\ufffe" +
    "\001\002\000\004\015\017\001\002\000\006\003\027\005" +
    "\030\001\002\000\010\003\ufff9\007\ufff9\012\ufff9\001\002" +
    "\000\010\003\023\007\024\012\022\001\002\000\006\003" +
    "\026\015\017\001\002\000\012\002\uffff\003\ufff6\007\ufff6" +
    "\012\ufff6\001\002\000\004\002\000\001\002\000\010\003" +
    "\ufff8\007\ufff8\012\ufff8\001\002\000\010\003\ufff7\007\ufff7" +
    "\012\ufff7\001\002\000\010\003\ufff3\007\ufff3\012\ufff3\001" +
    "\002\000\010\003\032\013\031\014\033\001\002\000\010" +
    "\003\ufff2\007\ufff2\012\ufff2\001\002\000\010\003\ufff4\007" +
    "\ufff4\012\ufff4\001\002\000\010\003\ufff1\007\ufff1\012\ufff1" +
    "\001\002\000\010\003\ufff5\007\ufff5\012\ufff5\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\020\005\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	this.errorNumber = 0;
	this.warrningNumber = 0;
    this.symbolTable = new SymbolTable();

    }


    public int errorNumber;
    public int warrningNumber;
    public SymbolTable symbolTable;

    public static void main( String[] args )
    {
        try{
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new Lexer( file );
            Parser parser = new Parser( scanner );
            parser.parse();
            if ( parser.errorNumber == 0 && parser.warrningNumber == 0 )
		    	System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   	else
		     	System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errorNumber + " Broj upozorenja: " + parser.warrningNumber );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public int getLine()
    {
        return (( Lexer ) getScanner()).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const ::= STRINGCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "string" ), c );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*Const*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Const ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "int" ), c );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*Const*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstantDefinition ::= ID error 
            {
              ConstantDefinition RESULT = null;
		
                        System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaju :!");
                        parser.errorNumber++;
                    
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*ConstantDefinition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstantDefinition ::= ID COLON error 
            {
              ConstantDefinition RESULT = null;
		
                        System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje konstanta!");
                        parser.errorNumber++;
                    
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*ConstantDefinition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstantDefinition ::= ID COLON Const 
            {
              ConstantDefinition RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                        RESULT = new ConstantDefinition(id, c);
                    
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*ConstantDefinition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstantList ::= ConstantList error 
            {
              ArrayList RESULT = null;
		
            System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje zapeta!");
            parser.errorNumber++;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ConstantList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstantList ::= ConstantList COMMA error 
            {
              ArrayList RESULT = null;
		
            System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje definicija konstanti!");
            parser.errorNumber++;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ConstantList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstantList ::= ConstantList COMMA ConstantDefinition 
            {
              ArrayList RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList cl = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ConstantDefinition cd = (ConstantDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            if( ( ( HashMap< String, ConstantDefinition > ) cl.get(0) ).containsKey(cd.id) )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": Identifikator vec iskoriscen!");
                parser.errorNumber++;
            }
            else if( ( ( HashMap< Object, ConstantDefinition > ) cl.get(1) ).containsKey( cd.constant.value ) )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": Vrednost vec iskoriscena!");
                parser.errorNumber++;
            }
            else
            {
                ( ( HashMap< String, ConstantDefinition > ) cl.get(0) ).put( cd.id, cd );
                ( ( HashMap< Object, ConstantDefinition > ) cl.get(1) ).put( cd.constant.value, cd );
                RESULT = cl;
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ConstantList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstantList ::= ConstantDefinition 
            {
              ArrayList RESULT = null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ConstantDefinition cd = (ConstantDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new ArrayList<HashMap>(){{
                add(new HashMap<String, ConstantDefinition>());
                add(new HashMap<Object, ConstantDefinition>());
            }};
            ( ( HashMap< String, ConstantDefinition > ) RESULT.get(0) ).put( cd.id, cd );
            ( ( HashMap< Object, ConstantDefinition > ) RESULT.get(1) ).put( cd.constant.value, cd );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ConstantList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= STRING 
            {
              Type RESULT = null;
		
            RESULT = parser.symbolTable.getType( "string" );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Type ::= INT 
            {
              Type RESULT = null;
		
            RESULT = parser.symbolTable.getType( "int" );
        
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EnumType ::= ENUM error 
            {
              Object RESULT = null;
		
                System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje identifikator!");
                parser.errorNumber++;
            
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*EnumType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EnumType ::= ENUM ID error 
            {
              Object RESULT = null;
		
                System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje definicija enuma!");
                parser.errorNumber++;
            
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*EnumType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EnumType ::= ENUM ID COLON Type error 
            {
              Object RESULT = null;
		
                System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje lista konstanti!");
                parser.errorNumber++;
            
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*EnumType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EnumType ::= ENUM ID COLON Type OPENCURLY ConstantList error 
            {
              Object RESULT = null;
		
                System.out.println( "Greska u liniji " + parser.getLine() + ": Nedostaje zatvorena zagrada!");
                parser.errorNumber++;
            
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*EnumType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // EnumType ::= ENUM ID COLON Type OPENCURLY ConstantList CLOSECURLY 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList cl = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Variable var = parser.symbolTable.getVar( id );
                boolean flag = false;
                if( var != null )
                {
                    // Nemam pojma da li su na ovo mislili, nema logike svejedno, jer se radi scope na nivou enuma
                    // wtf je sta god da je
                    System.out.println( "Greska u liniji " + parser.getLine() + ": Postoji vec definisan tip!");
                    parser.errorNumber++;
                }
                else
                {
                    for(String key : ( ( HashMap<String, ConstantDefinition> ) cl.get( 0 ) ).keySet() )
					{
                        if( t.tkind != ( ( HashMap<String, ConstantDefinition> ) cl.get( 0 ) ).get( key ).constant.type.tkind )
                        {
                            System.out.println( "Greska u liniji " + parser.getLine() + ": Tip clana se ne poklapa sa tipom enuma!");
                            parser.errorNumber++;
                        }
                    }
                }
            
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*EnumType*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= EnumType EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

