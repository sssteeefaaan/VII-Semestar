
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Dec 29 00:03:00 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Wed Dec 29 00:03:00 CET 2021
  */
public class MPParserSemantics extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParserSemantics() {super();}

  /** Constructor which sets the default scanner. */
  public MPParserSemantics(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\003\005\000\002\004" +
    "\005\000\002\005\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\006\005\000\002\006\003\000\002\012\003\000\002\012" +
    "\003\000\002\014\011\000\002\025\005\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\013\005\000\002\016\004\000\002\007\005" +
    "\000\002\007\003\000\002\017\010\000\002\020\004\000" +
    "\002\021\004\000\002\022\006\000\002\030\003\000\002" +
    "\023\004\000\002\023\004\000\002\023\003\000\002\027" +
    "\005\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\004\004\004\001\002\000\004\006\011\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\016\033\043\030\001\002\000\004\005\027\001" +
    "\002\000\014\011\021\012\015\013\013\014\017\015\020" +
    "\001\002\000\004\043\025\001\002\000\004\043\ufff8\001" +
    "\002\000\006\007\022\010\023\001\002\000\004\043\ufff9" +
    "\001\002\000\006\007\ufffc\010\ufffc\001\002\000\004\043" +
    "\ufff7\001\002\000\004\043\ufff6\001\002\000\004\043\ufffa" +
    "\001\002\000\006\016\ufffe\043\ufffe\001\002\000\014\011" +
    "\021\012\015\013\013\014\017\015\020\001\002\000\006" +
    "\007\ufffd\010\ufffd\001\002\000\004\010\026\001\002\000" +
    "\006\007\ufffb\010\ufffb\001\002\000\004\002\000\001\002" +
    "\000\004\026\115\001\002\000\010\010\ufff4\022\ufff4\030" +
    "\ufff4\001\002\000\010\010\ufff3\022\ufff3\030\ufff3\001\002" +
    "\000\004\017\107\001\002\000\010\010\ufff2\022\ufff2\030" +
    "\ufff2\001\002\000\006\010\037\030\040\001\002\000\006" +
    "\005\uffff\010\105\001\002\000\006\016\033\043\030\001" +
    "\002\000\004\032\043\001\002\000\006\005\uffe1\010\uffe1" +
    "\001\002\000\004\027\045\001\002\000\004\043\044\001" +
    "\002\000\004\027\uffdf\001\002\000\016\043\061\044\063" +
    "\045\064\046\056\047\057\050\054\001\002\000\004\033" +
    "\050\001\002\000\004\034\053\001\002\000\004\043\051" +
    "\001\002\000\004\034\uffde\001\002\000\004\031\102\001" +
    "\002\000\016\043\061\044\063\045\064\046\056\047\057" +
    "\050\054\001\002\000\032\010\uffe8\020\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\030\uffe8\031\uffe8\033\uffe8\035\uffe8" +
    "\041\uffe8\042\uffe8\001\002\000\004\035\073\001\002\000" +
    "\032\010\uffea\020\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\030\uffea\031\uffea\033\uffea\035\uffea\041\uffea\042\uffea\001" +
    "\002\000\032\010\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\030\uffe9\031\uffe9\033\uffe9\035\uffe9\041\uffe9\042" +
    "\uffe9\001\002\000\012\023\071\024\070\025\067\035\uffef" +
    "\001\002\000\032\010\uffee\020\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\030\uffee\031\uffee\033\uffee\035\uffee\041\uffee" +
    "\042\uffee\001\002\000\004\035\uffdc\001\002\000\032\010" +
    "\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec\030\uffec" +
    "\031\uffec\033\uffec\035\uffec\041\uffec\042\uffec\001\002\000" +
    "\032\010\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\030\uffeb\031\uffeb\033\uffeb\035\uffeb\041\uffeb\042\uffeb\001" +
    "\002\000\032\010\uffed\020\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\030\uffed\031\uffed\033\uffed\035\uffed\041\uffed\042" +
    "\uffed\001\002\000\016\043\061\044\063\045\064\046\056" +
    "\047\057\050\054\001\002\000\016\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\001\002\000\016\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\001\002\000" +
    "\016\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\001\002\000\004\035\ufff0\001\002\000\010\036\077\037" +
    "\075\040\076\001\002\000\004\031\uffdd\001\002\000\004" +
    "\043\101\001\002\000\004\031\uffd9\001\002\000\016\043" +
    "\061\044\063\045\064\046\056\047\057\050\054\001\002" +
    "\000\004\031\uffdb\001\002\000\004\031\uffda\001\002\000" +
    "\006\005\uffe0\010\uffe0\001\002\000\004\033\uffe3\001\002" +
    "\000\010\010\ufff5\022\ufff5\030\ufff5\001\002\000\004\030" +
    "\040\001\002\000\006\005\uffe2\010\uffe2\001\002\000\016" +
    "\043\061\044\063\045\064\046\056\047\057\050\054\001" +
    "\002\000\004\020\111\001\002\000\004\021\112\001\002" +
    "\000\006\016\033\043\030\001\002\000\006\010\037\022" +
    "\114\001\002\000\010\010\ufff1\022\ufff1\030\ufff1\001\002" +
    "\000\016\043\061\044\063\045\064\046\056\047\057\050" +
    "\054\001\002\000\014\010\uffe4\022\uffe4\030\uffe4\041\120" +
    "\042\121\001\002\000\014\010\uffd6\022\uffd6\030\uffd6\041" +
    "\uffd6\042\uffd6\001\002\000\016\043\061\044\063\045\064" +
    "\046\056\047\057\050\054\001\002\000\016\043\061\044" +
    "\063\045\064\046\056\047\057\050\054\001\002\000\014" +
    "\010\uffd7\022\uffd7\030\uffd7\041\uffd7\042\uffd7\001\002\000" +
    "\014\010\uffd8\022\uffd8\030\uffd8\041\uffd8\042\uffd8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\004\003\004\001\001\000\006\004\007\005" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\034\012\030\013\031\014\033\001\001\000\002\001" +
    "\001\000\010\010\013\011\015\024\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\023\024" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\035\017\040\001\001\000\002\001\001\000" +
    "\010\012\103\013\031\014\033\001\001\000\004\020\041" +
    "\001\001\000\002\001\001\000\004\016\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\102\031\064" +
    "\001\001\000\004\021\046\001\001\000\004\022\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\061\026\057\030\054\031\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\071\031\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\077\031\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\105\001\001" +
    "\000\002\001\001\000\006\026\107\031\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\112\012\030" +
    "\013\031\014\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\116\027\115\031\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\122\031\064\001" +
    "\001\000\006\026\121\031\064\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParserSemantics$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParserSemantics$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParserSemantics$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



   public int errNo = 0;
   public int warnNo = 0;
   
   SymbolTable symbolTable;
   
   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParserSemantics parser = new MPParserSemantics( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo == 0 && parser.warnNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo 
		         + " Broj upozorenja: " + parser.warnNo );
	  }
	  catch( Exception e )
	  {
		   System.out.println(e);
	  }
   }
   
   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def != -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name + 
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }
   
   public void syntax_error(Symbol cur_token)
   {
   	  
   }
   
   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }
   
   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParserSemantics$actions {
  private final MPParserSemantics parser;

  /** Constructor */
  CUP$MPParserSemantics$actions(MPParserSemantics parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParserSemantics$do_action(
    int                        CUP$MPParserSemantics$act_num,
    java_cup.runtime.lr_parser CUP$MPParserSemantics$parser,
    java.util.Stack            CUP$MPParserSemantics$stack,
    int                        CUP$MPParserSemantics$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParserSemantics$result;

      /* select the action based on the action number */
      switch (CUP$MPParserSemantics$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Term 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            RESULT = t;
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(21/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression MULTIPLY Term 
            {
              Type RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            if((e.tkind != Type.INT && e.tkind != Type.DOUBLE) || (t.tkind != Type.INT && t.tkind != Type.DOUBLE))
            {
                System.out.println("Greska u liniji " + parser.getLine() + ": " + 
              	   "Aritmeticki operator * se ne moze primeniti nad operandima tipa " + 
              	   e.tkind + " i " + t.tkind );
              	parser.errNo++;

                RESULT = parser.symbolTable.getType("unknown");
            }
            else
            {
                if(e.tkind == Type.DOUBLE || t.tkind == Type.DOUBLE)
                    RESULT = parser.symbolTable.getType("double");
                else
                    RESULT = parser.symbolTable.getType("int");
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(21/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression PLUS Term 
            {
              Type RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            if((e.tkind != Type.INT && e.tkind != Type.DOUBLE) || (t.tkind != Type.INT && t.tkind != Type.DOUBLE))
            {
                System.out.println("Greska u liniji " + parser.getLine() + ": " + 
              	   "Aritmeticki operator + se ne moze primeniti nad operandima tipa " + 
              	   e.tkind + " i " + t.tkind );
              	parser.errNo++;

                RESULT = parser.symbolTable.getType("unknown");
            }
            else
            {
                if(e.tkind == Type.DOUBLE || t.tkind == Type.DOUBLE)
                    RESULT = parser.symbolTable.getType("double");
                else
                    RESULT = parser.symbolTable.getType("int");
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(21/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Response ::= OPTIMIZE 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(17/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Response ::= REDEPLOY_ON ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                    ": promenljiva " + id + " nije deklarisana.");
                parser.errNo++;
            }
            else 
            {
                if ( var.type.tkind != Type.STRING )
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + 
                        ": Identifikator servera mora biti tipa string." );
                    parser.errNo++;
                }
                else{
                    var.last_use = parser.getLine();
                }
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(17/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Response ::= SCALE Term 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            if ( t.tkind != Type.INT )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                    ": Faktor skaliranja mora biti tipa int." );
                parser.errNo++;
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(17/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Condition ::= RelExpression 
            {
              Type RESULT = null;
		int rExpleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int rExpright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Type rExp = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            RESULT = rExp;
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(22/*Condition*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AdaptationRule ::= IF Condition THEN Response 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		
            if(c.tkind != Type.BOOL)
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                    ": Uslov unutar adaptacije mora biti tipa bool." );
                parser.errNo++;
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(16/*AdaptationRule*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Allocation ::= EXECUTED_BY ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                    ": promenljiva " + id + " nije deklarisana.");
                parser.errNo++;
            }
            else 
            {
                if ( var.type.tkind != Type.STRING )
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + 
                        ": Identifikator servera mora biti tipa string." );
                    parser.errNo++;
                }
                else{
                    var.last_use = parser.getLine();
                }
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(15/*Allocation*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ServiceName ::= SERVICE_NAME ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                    ": promenljiva " + id + " nije deklarisana.");
                parser.errNo++;
            }
            else 
            {
                if ( var.type.tkind != Type.CHAR )
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + 
                        ": Ime servisa mora biti tipa char." );
                    parser.errNo++;
                }
                else{
                    var.last_use = parser.getLine();
                }
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(14/*ServiceName*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ServiceDef ::= SERVICE_BEGIN ServiceName Instances Allocation AdaptationRule SERVICE_END 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(13/*ServiceDef*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ServiceList ::= ServiceDef 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(5/*ServiceList*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ServiceList ::= ServiceList SEMICOLON ServiceDef 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(5/*ServiceList*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instances ::= NUM_INSTANCES Term 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            if(t.tkind != Type.INT)
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                        ": Broj instanci servisa mora biti tipa int." );
                    parser.errNo++;
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(12/*Instances*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Assignment ::= ID ASSIGN Expression 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                    ": promenljiva " + id + " nije deklarisana.");
                parser.errNo++;
            }
            else 
            {
                var.last_def = parser.getLine();
                if ( var.type.tkind != e.tkind )
                {
                    System.out.println( "Greska u liniji " + parser.getLine() + 
                        ": Neslaganje tipa u naredbi dodele." );
                    parser.errNo++;
                }
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(9/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= GREATER 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(11/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RelOp ::= EQUAL 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(11/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelOp ::= LESS 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(11/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONST ::= STRINGCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "string" ), c );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(23/*CONST*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONST ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "char" ), c );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(23/*CONST*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONST ::= BOOLCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "bool" ), c );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(23/*CONST*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONST ::= DOUBLECONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "double" ), c );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(23/*CONST*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONST ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            RESULT = new Constant( parser.symbolTable.getType( "int" ), c );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(23/*CONST*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Term ::= CONST 
            {
              Type RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            RESULT = c.type;
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(20/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Term ::= ID 
            {
              Type RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            Variable var = parser.symbolTable.getVar( id );
            if ( var == null )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                    ": promenljiva " + id + " nije deklarisana.");
                RESULT = parser.symbolTable.getType( "unknown" );
                parser.errNo++;
            }
            else 
            {
                RESULT = var.type;
                if ( var.last_def == -1 )
                {
                    System.out.println( "Grreska u liniji " + parser.getLine() + 
                        ": promenljiva " + id + " nije inicijalizovana.");
                    parser.errNo++;
                }
                var.last_use = parser.getLine();
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(20/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RelExpression ::= Term 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            RESULT = t;
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(19/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RelExpression ::= Term RelOp Term 
            {
              Type RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).value;
		
            if(t1.tkind != t2.tkind)
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                    ": Ne mogu se uporedjivati izrazi razlicitog tipa.");
                parser.errNo++;

                RESULT = parser.symbolTable.getType( "unknown" );
            }
            else
                RESULT = parser.symbolTable.getType( "bool" );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(19/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // WhileStatement ::= REPEAT OPEN_BRACKET Term CLOSE_BRACKET OPEN_CURLY_BRACKET Statements CLOSE_CURLY_BRACKET 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-4)).value;
		
            if(t.tkind != Type.BOOL)
            {
                System.out.println( "Greska u liniji " + parser.getLine() + 
                    ": Izraz u uslovu petlje mora biti tipa bool." );
                parser.errNo++;
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(10/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= WhileStatement 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= Assignment 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statements ::= Statement 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(4/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statements ::= Statements SEMICOLON Statement 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(4/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= CHAR 
            {
              Type RESULT = null;
		
           RESULT = parser.symbolTable.getType( "char" );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(18/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              Type RESULT = null;
		
           RESULT = parser.symbolTable.getType( "bool" );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(18/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= STRING 
            {
              Type RESULT = null;
		
           RESULT = parser.symbolTable.getType( "string" );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(18/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= DOUBLE 
            {
              Type RESULT = null;
		
           RESULT = parser.symbolTable.getType( "double" );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(18/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              Type RESULT = null;
		
           RESULT = parser.symbolTable.getType( "int" );
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(18/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variable ::= Type ID SEMICOLON 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
					   
            if ( ! parser.symbolTable.addVar( id, t ) )
            {
                System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                "Promenljiva " + id + " je vec deklarisana." );
                parser.errNo++;
            }
        
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(7/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VariableDeclaration ::= Variable 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(6/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(6/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= DECLARATION_BEGIN VariableDeclaration DECLARATION_END 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= Declarations Statements ServiceList 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(2/*Body*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Strategy ::= STRATEGY_BEGIN Body STRATEGY_END 
            {
              Object RESULT = null;

              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(1/*Strategy*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          return CUP$MPParserSemantics$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Strategy EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).value;
		RESULT = start_val;
              CUP$MPParserSemantics$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserSemantics$stack.elementAt(CUP$MPParserSemantics$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParserSemantics$parser.done_parsing();
          return CUP$MPParserSemantics$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

