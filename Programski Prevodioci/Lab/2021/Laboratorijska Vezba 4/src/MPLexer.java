// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Stefan/Desktop/VII-Semestar/Programski Prevodioci/Lab/2021/Laboratorijska Vezba 4/src/MPLexer.flex

// Import sekcija
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class MPLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\2\1\1\22\0\1\1\1\0\1\3"+
    "\4\0\1\4\1\5\1\6\1\7\1\10\1\0\1\11"+
    "\1\12\1\0\1\13\11\14\1\0\1\15\1\16\1\17"+
    "\1\20\2\0\1\21\1\22\6\21\1\23\4\21\1\24"+
    "\1\25\13\21\6\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\21\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\21\1\52\1\53\1\54\1\55\1\0\1\56\1\57"+
    "\6\0\1\2\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\1\2\7\1\10\1\1\1\11\16\12\1\13\1\14"+
    "\2\1\1\2\1\0\2\1\1\3\1\4\1\5\1\6"+
    "\1\1\2\7\1\10\1\1\1\11\16\12\1\13\1\14"+
    "\1\1\4\0\10\12\1\15\12\12\11\0\12\12\1\15"+
    "\12\12\2\0\1\16\1\17\2\20\1\0\10\12\1\21"+
    "\12\12\4\0\1\16\1\0\1\17\2\20\1\0\11\12"+
    "\1\21\12\12\4\0\1\22\1\23\5\12\1\24\10\12"+
    "\1\25\1\26\6\0\1\22\1\23\6\12\1\24\10\12"+
    "\1\25\1\26\4\0\2\12\1\27\6\12\1\30\3\12"+
    "\7\0\2\12\1\27\6\12\1\30\3\12\3\0\1\31"+
    "\1\12\1\32\5\12\1\33\2\12\1\34\3\0\1\31"+
    "\1\35\1\12\1\32\5\12\1\33\2\12\1\34\3\0"+
    "\2\12\1\36\3\12\1\37\1\12\3\0\2\12\1\36"+
    "\3\12\1\37\1\12\3\0\3\12\1\40\2\12\1\41"+
    "\1\0\1\42\1\0\3\12\1\40\2\12\1\41\1\0"+
    "\1\42\1\0\5\12\1\0\1\43\5\12\1\0\1\43"+
    "\1\12\1\44\1\12\1\45\1\12\1\0\1\12\1\44"+
    "\1\12\1\45\1\12\1\0\1\46\1\12\1\47\1\0"+
    "\1\46\1\12\1\47\1\0\1\50\1\51\1\50\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\140\0\220\0\300\0\140\0\140"+
    "\0\140\0\140\0\360\0\u0120\0\u0150\0\140\0\u0180\0\140"+
    "\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300"+
    "\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\140\0\140"+
    "\0\u0450\0\u0480\0\u0480\0\u0480\0\u04b0\0\u04e0\0\u0480\0\u0480"+
    "\0\u0480\0\u0480\0\u0510\0\u0540\0\u0570\0\u0480\0\u05a0\0\u0480"+
    "\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0480\0\u0480"+
    "\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u01b0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u0ff0\0\u1020\0\u05d0\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\140\0\140\0\140\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u01b0\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u0480\0\u1710\0\u0480\0\u0480"+
    "\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890"+
    "\0\u18c0\0\u18f0\0\u1920\0\u05d0\0\u1950\0\u1980\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u01b0\0\u01b0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80"+
    "\0\u1cb0\0\u01b0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0"+
    "\0\u1e00\0\u1e30\0\u01b0\0\u01b0\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0"+
    "\0\u1f20\0\u1f50\0\u05d0\0\u05d0\0\u1f80\0\u1fb0\0\u1fe0\0\u2010"+
    "\0\u2040\0\u2070\0\u05d0\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160"+
    "\0\u2190\0\u21c0\0\u21f0\0\u05d0\0\u05d0\0\u2220\0\u2250\0\u2280"+
    "\0\u22b0\0\u22e0\0\u2310\0\u01b0\0\u2340\0\u2370\0\u23a0\0\u23d0"+
    "\0\u2400\0\u2430\0\u01b0\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520"+
    "\0\u2550\0\u2580\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u2670\0\u05d0"+
    "\0\u26a0\0\u26d0\0\u2700\0\u2730\0\u2760\0\u2790\0\u05d0\0\u27c0"+
    "\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0\0\140\0\u28e0\0\u01b0"+
    "\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u01b0\0\u2a00\0\u2a30"+
    "\0\u01b0\0\u2a60\0\u2a90\0\u2ac0\0\u2580\0\140\0\u2af0\0\u05d0"+
    "\0\u2b20\0\u2b50\0\u2b80\0\u2bb0\0\u2be0\0\u05d0\0\u2c10\0\u2c40"+
    "\0\u05d0\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30\0\u01b0\0\u2d60"+
    "\0\u2d90\0\u2dc0\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\u2eb0\0\u2ee0"+
    "\0\u2f10\0\u05d0\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030"+
    "\0\u3060\0\u3090\0\u30c0\0\u30f0\0\u3120\0\u01b0\0\u3150\0\u3180"+
    "\0\u01b0\0\u31b0\0\140\0\u31e0\0\u3210\0\u3240\0\u3270\0\u05d0"+
    "\0\u32a0\0\u32d0\0\u05d0\0\u3300\0\u0480\0\u3330\0\u3360\0\u3390"+
    "\0\u33c0\0\u33f0\0\u3420\0\u3450\0\140\0\u3480\0\u34b0\0\u34e0"+
    "\0\u3510\0\u3540\0\u3570\0\u0480\0\u35a0\0\u01b0\0\u35d0\0\u01b0"+
    "\0\u3600\0\u3630\0\u3660\0\u05d0\0\u3690\0\u05d0\0\u36c0\0\u36f0"+
    "\0\u01b0\0\u3720\0\u01b0\0\u3750\0\u05d0\0\u3780\0\u05d0\0\u37b0"+
    "\0\u01b0\0\140\0\u05d0\0\u0480";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\3\1\14\1\15\1\16\1\17\1\20"+
    "\1\3\6\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\21\1\30\1\31\1\21\1\32\1\33\2\21\1\34"+
    "\1\35\1\36\5\21\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\42\1\54\1\55\1\56\1\57\1\60\1\42\6\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\61\1\70"+
    "\1\71\1\61\1\72\1\73\2\61\1\74\1\75\1\76"+
    "\5\61\1\77\1\100\1\101\73\0\2\102\4\0\34\102"+
    "\16\0\2\103\4\0\34\103\16\0\1\14\1\15\55\0"+
    "\1\104\57\0\1\104\2\15\54\0\1\105\61\0\2\21"+
    "\4\0\34\21\16\0\2\21\4\0\21\21\1\106\12\21"+
    "\16\0\2\21\4\0\14\21\1\107\17\21\16\0\2\21"+
    "\4\0\11\21\1\110\7\21\1\111\12\21\16\0\2\21"+
    "\4\0\23\21\1\112\5\21\1\113\2\21\16\0\2\21"+
    "\4\0\5\21\1\114\26\21\16\0\2\21\4\0\24\21"+
    "\1\115\7\21\16\0\2\21\4\0\12\21\1\116\5\21"+
    "\1\117\13\21\16\0\2\21\4\0\11\21\1\120\22\21"+
    "\16\0\2\21\4\0\27\21\1\121\4\21\16\0\2\21"+
    "\4\0\22\21\1\122\11\21\16\0\2\21\4\0\11\21"+
    "\1\123\22\21\16\0\2\21\4\0\7\21\1\124\1\21"+
    "\1\125\14\21\1\126\5\21\16\0\2\21\4\0\14\21"+
    "\1\127\7\21\1\130\7\21\34\0\1\131\14\0\1\132"+
    "\11\0\30\44\1\133\42\44\2\134\4\44\7\134\1\135"+
    "\24\134\16\44\2\136\4\44\7\136\1\137\24\136\16\44"+
    "\1\54\1\55\13\44\1\133\41\44\1\140\15\44\1\133"+
    "\41\44\1\140\2\55\13\44\1\133\40\44\1\141\16\44"+
    "\1\133\42\44\2\61\4\44\7\61\1\142\24\61\16\44"+
    "\2\61\4\44\7\61\1\142\11\61\1\143\12\61\16\44"+
    "\2\61\4\44\7\61\1\142\4\61\1\144\4\61\1\145"+
    "\12\61\16\44\2\61\4\44\7\61\1\142\1\61\1\146"+
    "\7\61\1\147\12\61\16\44\2\61\4\44\7\61\1\142"+
    "\13\61\1\150\5\61\1\151\2\61\16\44\2\61\4\44"+
    "\5\61\1\152\1\61\1\142\24\61\16\44\2\61\4\44"+
    "\7\61\1\142\14\61\1\153\7\61\16\44\2\61\4\44"+
    "\7\61\1\142\2\61\1\154\5\61\1\155\13\61\16\44"+
    "\2\61\4\44\7\61\1\142\1\61\1\156\22\61\16\44"+
    "\2\61\4\44\7\61\1\142\17\61\1\157\4\61\16\44"+
    "\2\61\4\44\7\61\1\142\12\61\1\160\11\61\16\44"+
    "\2\61\4\44\7\61\1\142\1\61\1\161\22\61\16\44"+
    "\2\61\4\44\7\61\1\162\1\61\1\163\14\61\1\164"+
    "\5\61\16\44\2\61\4\44\7\61\1\142\4\61\1\165"+
    "\7\61\1\166\7\61\33\44\1\133\1\167\14\44\1\170"+
    "\11\44\3\0\1\171\7\0\2\102\4\0\34\102\7\0"+
    "\1\172\66\0\1\173\1\174\73\0\1\175\42\0\2\21"+
    "\4\0\21\21\1\176\12\21\16\0\2\21\4\0\5\21"+
    "\1\177\26\21\16\0\2\21\4\0\7\21\1\200\24\21"+
    "\16\0\2\21\4\0\27\21\1\201\4\21\16\0\2\21"+
    "\4\0\27\21\1\202\4\21\16\0\2\21\4\0\11\21"+
    "\1\203\22\21\16\0\2\21\4\0\16\21\1\204\15\21"+
    "\16\0\2\21\4\0\11\21\1\205\22\21\16\0\2\21"+
    "\4\0\26\21\1\206\5\21\16\0\2\21\4\0\25\21"+
    "\1\207\6\21\16\0\2\21\4\0\17\21\1\210\14\21"+
    "\16\0\2\21\4\0\26\21\1\211\5\21\16\0\2\21"+
    "\4\0\10\21\1\212\11\21\1\213\11\21\16\0\2\21"+
    "\4\0\5\21\1\214\26\21\16\0\2\21\4\0\24\21"+
    "\1\215\7\21\16\0\2\21\4\0\24\21\1\216\7\21"+
    "\16\0\2\21\4\0\11\21\1\217\22\21\16\0\2\21"+
    "\4\0\27\21\1\220\4\21\35\0\1\221\57\0\1\222"+
    "\14\0\1\223\10\0\30\44\1\133\11\44\1\224\20\44"+
    "\1\225\7\44\2\134\4\44\7\134\1\135\24\134\6\44"+
    "\1\225\7\44\2\134\4\44\7\134\1\135\11\134\1\226"+
    "\12\134\7\44\1\227\23\44\1\133\33\44\1\227\23\44"+
    "\1\133\11\44\1\224\30\44\1\230\1\231\13\44\1\133"+
    "\57\44\1\232\42\44\2\61\4\44\7\61\1\142\11\61"+
    "\1\145\12\61\16\44\2\61\4\44\7\61\1\142\11\61"+
    "\1\233\12\61\16\44\2\61\4\44\5\61\1\234\1\61"+
    "\1\142\24\61\16\44\2\61\4\44\7\61\1\142\7\61"+
    "\1\235\14\61\16\44\2\61\4\44\7\61\1\236\24\61"+
    "\16\44\2\61\4\44\7\61\1\142\17\61\1\237\4\61"+
    "\16\44\2\61\4\44\7\61\1\142\17\61\1\240\4\61"+
    "\16\44\2\61\4\44\7\61\1\142\1\61\1\241\22\61"+
    "\16\44\2\61\4\44\7\61\1\142\6\61\1\242\15\61"+
    "\16\44\2\61\4\44\7\61\1\142\1\61\1\243\22\61"+
    "\16\44\2\61\4\44\7\61\1\142\16\61\1\244\5\61"+
    "\16\44\2\61\4\44\7\61\1\142\15\61\1\245\6\61"+
    "\16\44\2\61\4\44\7\61\1\142\7\61\1\246\14\61"+
    "\16\44\2\61\4\44\7\61\1\142\16\61\1\247\5\61"+
    "\16\44\2\61\4\44\7\61\1\142\1\250\11\61\1\251"+
    "\11\61\16\44\2\61\4\44\5\61\1\252\1\61\1\142"+
    "\11\61\1\145\12\61\16\44\2\61\4\44\7\61\1\142"+
    "\14\61\1\253\7\61\16\44\2\61\4\44\7\61\1\142"+
    "\14\61\1\254\7\61\16\44\2\61\4\44\7\61\1\142"+
    "\1\61\1\255\22\61\16\44\2\61\4\44\7\61\1\142"+
    "\17\61\1\256\4\61\33\44\1\133\1\44\1\257\55\44"+
    "\1\133\1\44\1\260\14\44\1\261\10\44\13\0\2\174"+
    "\105\0\1\262\30\0\2\21\4\0\16\21\1\263\15\21"+
    "\16\0\2\21\4\0\24\21\1\264\7\21\16\0\2\21"+
    "\4\0\16\21\1\265\15\21\16\0\2\21\4\0\6\21"+
    "\1\266\25\21\16\0\2\21\4\0\5\21\1\267\26\21"+
    "\16\0\2\21\4\0\7\21\1\270\24\21\16\0\2\21"+
    "\4\0\25\21\1\220\6\21\16\0\2\21\4\0\5\21"+
    "\1\271\26\21\16\0\2\21\4\0\25\21\1\272\6\21"+
    "\16\0\2\21\4\0\2\21\1\273\31\21\16\0\2\21"+
    "\4\0\15\21\1\274\16\21\16\0\2\21\4\0\11\21"+
    "\1\275\22\21\16\0\2\21\4\0\11\21\1\276\22\21"+
    "\16\0\2\21\4\0\16\21\1\277\15\21\16\0\2\21"+
    "\4\0\30\21\1\300\3\21\16\0\2\21\4\0\5\21"+
    "\1\301\7\21\1\302\16\21\16\0\2\21\4\0\20\21"+
    "\1\303\13\21\16\0\2\21\4\0\11\21\1\304\22\21"+
    "\33\0\1\305\74\0\1\306\57\0\1\307\12\0\30\44"+
    "\1\133\7\44\1\310\22\44\1\225\7\44\2\134\4\44"+
    "\7\134\1\135\7\134\1\311\14\134\16\44\2\231\13\44"+
    "\1\133\57\44\1\133\11\44\1\312\30\44\2\61\4\44"+
    "\7\61\1\142\6\61\1\313\15\61\16\44\2\61\4\44"+
    "\7\61\1\142\14\61\1\314\7\61\16\44\2\61\4\44"+
    "\7\61\1\142\7\61\1\315\14\61\16\44\2\61\4\44"+
    "\7\61\1\142\6\61\1\316\2\61\1\145\12\61\16\44"+
    "\2\61\4\44\6\61\1\317\1\142\24\61\16\44\2\61"+
    "\4\44\5\61\1\320\1\61\1\142\24\61\16\44\2\61"+
    "\4\44\7\61\1\321\24\61\16\44\2\61\4\44\7\61"+
    "\1\142\15\61\1\256\6\61\16\44\2\61\4\44\5\61"+
    "\1\322\1\61\1\142\24\61\16\44\2\61\4\44\7\61"+
    "\1\142\15\61\1\323\6\61\16\44\2\61\4\44\2\61"+
    "\1\324\4\61\1\142\24\61\16\44\2\61\4\44\7\61"+
    "\1\142\5\61\1\325\16\61\16\44\2\61\4\44\7\61"+
    "\1\142\1\61\1\326\22\61\16\44\2\61\4\44\7\61"+
    "\1\142\1\61\1\327\22\61\16\44\2\61\4\44\7\61"+
    "\1\142\6\61\1\330\15\61\16\44\2\61\4\44\7\61"+
    "\1\142\20\61\1\331\3\61\16\44\2\61\4\44\5\61"+
    "\1\332\1\61\1\142\5\61\1\333\16\61\16\44\2\61"+
    "\4\44\7\61\1\142\10\61\1\334\13\61\16\44\2\61"+
    "\4\44\7\61\1\142\1\61\1\335\22\61\33\44\1\336"+
    "\57\44\1\133\14\44\1\337\42\44\1\133\14\44\1\340"+
    "\12\44\40\0\1\341\32\0\2\21\4\0\5\21\1\342"+
    "\26\21\16\0\2\21\4\0\16\21\1\343\15\21\16\0"+
    "\2\21\4\0\16\21\1\344\15\21\16\0\2\21\4\0"+
    "\27\21\1\345\4\21\16\0\2\21\4\0\26\21\1\346"+
    "\5\21\16\0\2\21\4\0\20\21\1\347\13\21\16\0"+
    "\2\21\4\0\17\21\1\350\14\21\16\0\2\21\4\0"+
    "\22\21\1\351\11\21\16\0\2\21\4\0\5\21\1\352"+
    "\26\21\16\0\2\21\4\0\11\21\1\353\22\21\16\0"+
    "\2\21\4\0\15\21\1\354\16\21\16\0\2\21\4\0"+
    "\26\21\1\355\5\21\16\0\2\21\4\0\20\21\1\356"+
    "\13\21\42\0\1\357\71\0\1\360\34\0\1\361\31\0"+
    "\30\44\1\133\7\44\1\362\22\44\1\225\7\44\2\134"+
    "\4\44\7\134\1\135\7\134\1\363\14\134\33\44\1\133"+
    "\7\44\1\364\30\44\1\365\1\44\2\61\4\44\7\61"+
    "\1\142\24\61\16\44\2\61\4\44\5\61\1\366\1\61"+
    "\1\142\24\61\16\44\2\61\4\44\7\61\1\142\6\61"+
    "\1\367\15\61\16\44\2\61\4\44\7\61\1\142\6\61"+
    "\1\370\15\61\16\44\2\61\4\44\7\61\1\142\11\61"+
    "\1\145\5\61\1\371\4\61\16\44\2\61\4\44\7\61"+
    "\1\142\16\61\1\372\5\61\16\44\2\61\4\44\7\61"+
    "\1\142\10\61\1\373\13\61\16\44\2\61\4\44\7\61"+
    "\1\142\7\61\1\374\14\61\16\44\2\61\4\44\7\61"+
    "\1\142\12\61\1\375\11\61\16\44\2\61\4\44\5\61"+
    "\1\376\1\61\1\142\24\61\16\44\2\61\4\44\7\61"+
    "\1\142\1\61\1\377\22\61\16\44\2\61\4\44\7\61"+
    "\1\142\5\61\1\u0100\16\61\16\44\2\61\4\44\7\61"+
    "\1\142\16\61\1\u0101\5\61\16\44\2\61\4\44\7\61"+
    "\1\142\10\61\1\u0102\13\61\33\44\1\133\6\44\1\u0103"+
    "\2\44\1\224\45\44\1\133\20\44\1\u0104\34\44\1\u0105"+
    "\1\44\1\133\27\44\40\0\1\u0106\32\0\2\21\4\0"+
    "\24\21\1\u0107\7\21\16\0\2\21\4\0\11\21\1\u0108"+
    "\22\21\16\0\2\21\4\0\26\21\1\u0109\5\21\16\0"+
    "\2\21\4\0\11\21\1\u010a\22\21\16\0\2\21\4\0"+
    "\25\21\1\u010b\6\21\16\0\2\21\4\0\15\21\1\u010c"+
    "\16\21\16\0\2\21\4\0\16\21\1\u010d\15\21\16\0"+
    "\2\21\4\0\26\21\1\u010e\5\21\16\0\2\21\4\0"+
    "\7\21\1\u010f\24\21\16\0\2\21\4\0\11\21\1\u0110"+
    "\22\21\16\0\2\21\4\0\13\21\1\u0111\20\21\31\0"+
    "\1\u0112\67\0\1\u0113\70\0\1\u0114\10\0\11\44\1\365"+
    "\16\44\1\133\32\44\1\225\5\44\1\365\1\44\2\134"+
    "\4\44\7\134\1\135\24\134\33\44\1\133\7\44\1\u0115"+
    "\37\44\1\u0116\7\44\1\133\42\44\2\61\4\44\7\61"+
    "\1\142\14\61\1\u0117\7\61\16\44\2\61\4\44\7\61"+
    "\1\142\1\61\1\u0118\22\61\16\44\2\61\4\44\7\61"+
    "\1\142\16\61\1\u0119\5\61\16\44\2\61\4\44\7\61"+
    "\1\142\1\61\1\u011a\22\61\16\44\2\61\4\44\7\61"+
    "\1\142\15\61\1\u011b\6\61\16\44\2\61\4\44\7\61"+
    "\1\142\5\61\1\u011c\16\61\16\44\2\61\4\44\7\61"+
    "\1\142\6\61\1\u011d\15\61\16\44\2\61\4\44\7\61"+
    "\1\142\16\61\1\u011e\5\61\16\44\2\61\4\44\7\61"+
    "\1\u011f\24\61\16\44\2\61\4\44\7\61\1\142\1\61"+
    "\1\u0120\22\61\16\44\2\61\4\44\7\61\1\142\3\61"+
    "\1\u0121\20\61\31\44\1\u0122\1\44\1\133\57\44\1\133"+
    "\5\44\1\u0123\51\44\1\133\16\44\1\u0124\10\44\13\0"+
    "\2\21\4\0\5\21\1\u0125\26\21\16\0\2\21\4\0"+
    "\11\21\1\u0126\22\21\16\0\2\21\4\0\24\21\1\u0127"+
    "\7\21\16\0\2\21\4\0\26\21\1\u0128\5\21\16\0"+
    "\2\21\4\0\33\21\1\u0129\16\0\2\21\4\0\21\21"+
    "\1\u012a\12\21\16\0\2\21\4\0\11\21\1\u012b\22\21"+
    "\16\0\2\21\4\0\13\21\1\u012c\20\21\50\0\1\u012d"+
    "\42\0\1\u012e\61\0\1\u012f\25\0\13\44\2\61\4\44"+
    "\5\61\1\u0130\1\61\1\142\24\61\16\44\2\61\4\44"+
    "\7\61\1\142\1\61\1\u0131\22\61\16\44\2\61\4\44"+
    "\7\61\1\142\14\61\1\u0132\7\61\16\44\2\61\4\44"+
    "\7\61\1\142\16\61\1\u0133\5\61\16\44\2\61\4\44"+
    "\7\61\1\142\23\61\1\u0134\16\44\2\61\4\44\7\61"+
    "\1\142\11\61\1\u0135\12\61\16\44\2\61\4\44\7\61"+
    "\1\142\1\61\1\u0136\7\61\1\145\12\61\16\44\2\61"+
    "\4\44\7\61\1\142\3\61\1\u0137\20\61\33\44\1\133"+
    "\14\44\1\u0138\42\44\1\u0139\57\44\1\133\1\44\1\u013a"+
    "\25\44\13\0\2\21\4\0\26\21\1\u013b\5\21\16\0"+
    "\2\21\4\0\10\21\1\u013c\23\21\16\0\2\21\4\0"+
    "\5\21\1\u013d\26\21\16\0\2\21\4\0\11\21\1\u013e"+
    "\22\21\16\0\2\21\4\0\32\21\1\u013f\1\21\16\0"+
    "\2\21\4\0\3\21\1\u0140\30\21\16\0\2\21\4\0"+
    "\32\21\1\u0141\1\21\31\0\1\u0142\63\0\1\u0143\61\0"+
    "\1\u0144\23\0\13\44\2\61\4\44\7\61\1\142\16\61"+
    "\1\u0145\5\61\16\44\2\61\4\44\7\61\1\142\1\u0146"+
    "\23\61\16\44\2\61\4\44\5\61\1\u0147\1\61\1\142"+
    "\24\61\16\44\2\61\4\44\7\61\1\142\1\61\1\u0148"+
    "\22\61\16\44\2\61\4\44\7\61\1\142\22\61\1\u0149"+
    "\1\61\16\44\2\61\4\44\3\61\1\u014a\3\61\1\142"+
    "\24\61\16\44\2\61\4\44\7\61\1\142\22\61\1\u014b"+
    "\1\61\31\44\1\u014c\1\44\1\133\57\44\1\133\1\44"+
    "\1\u014d\7\44\1\224\45\44\1\133\3\44\1\u014e\23\44"+
    "\13\0\2\21\4\0\15\21\1\u014f\16\21\16\0\2\21"+
    "\4\0\1\21\1\u0150\32\21\16\0\2\21\4\0\20\21"+
    "\1\u0151\13\21\16\0\2\21\4\0\4\21\1\u0152\27\21"+
    "\16\0\2\21\4\0\5\21\1\u0153\26\21\52\0\1\u0154"+
    "\63\0\1\u0155\4\0\13\44\2\61\4\44\7\61\1\142"+
    "\5\61\1\u0156\16\61\16\44\2\61\4\44\1\61\1\u0157"+
    "\5\61\1\142\24\61\16\44\2\61\4\44\7\61\1\142"+
    "\10\61\1\u0158\13\61\16\44\2\61\4\44\4\61\1\u0159"+
    "\2\61\1\142\24\61\16\44\2\61\4\44\5\61\1\u015a"+
    "\1\61\1\142\24\61\33\44\1\133\16\44\1\u015b\40\44"+
    "\1\133\22\44\1\u015c\4\44\13\0\2\21\4\0\21\21"+
    "\1\u015d\12\21\16\0\2\21\4\0\32\21\1\u015e\1\21"+
    "\16\0\2\21\4\0\7\21\1\u015f\24\21\16\0\2\21"+
    "\4\0\20\21\1\u0160\13\21\16\0\2\21\4\0\17\21"+
    "\1\u0161\14\21\41\0\1\u0162\21\0\13\44\2\61\4\44"+
    "\7\61\1\142\11\61\1\u0163\12\61\16\44\2\61\4\44"+
    "\7\61\1\142\22\61\1\u0164\1\61\16\44\2\61\4\44"+
    "\7\61\1\u0165\24\61\16\44\2\61\4\44\7\61\1\142"+
    "\10\61\1\u0166\13\61\16\44\2\61\4\44\7\61\1\142"+
    "\7\61\1\u0167\14\61\33\44\1\133\5\44\1\u0168\21\44"+
    "\13\0\2\21\4\0\20\21\1\u0169\13\21\16\0\2\21"+
    "\4\0\11\21\1\u016a\22\21\16\0\2\21\4\0\11\21"+
    "\1\u016b\22\21\45\0\1\u016c\15\0\13\44\2\61\4\44"+
    "\7\61\1\142\10\61\1\u016d\13\61\16\44\2\61\4\44"+
    "\7\61\1\142\1\61\1\u016e\7\61\1\145\12\61\16\44"+
    "\2\61\4\44\7\61\1\142\1\61\1\u016f\22\61\33\44"+
    "\1\133\11\44\1\u0170\15\44\13\0\2\21\4\0\25\21"+
    "\1\u0171\6\21\44\0\1\u0172\16\0\13\44\2\61\4\44"+
    "\7\61\1\142\15\61\1\u0173\6\61\33\44\1\133\10\44"+
    "\1\u0174\16\44";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14304];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\4\11\3\1\1\11\1\1\1\11"+
    "\16\1\2\11\3\1\1\0\35\1\4\0\23\1\11\0"+
    "\25\1\2\0\3\11\1\1\1\0\23\1\4\0\1\1"+
    "\1\0\3\1\1\0\24\1\4\0\22\1\6\0\23\1"+
    "\4\0\15\1\7\0\15\1\3\0\1\11\13\1\3\0"+
    "\1\1\1\11\13\1\3\0\10\1\3\0\10\1\3\0"+
    "\7\1\1\0\1\11\1\0\7\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\11\5\1\1\0\6\1\1\0\5\1"+
    "\1\0\3\1\1\0\3\1\1\0\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public int getLine()
    {
        return yyline;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MPLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol( sym.EOF );
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if (yytext() != null && yytext().length() > 0) System.out.println( "Error at ln: " + yyline + ", column: " + yycolumn + " -- " + yytext() );
            }
            // fall through
          case 42: break;
          case 2:
            { ;
            }
            // fall through
          case 43: break;
          case 3:
            { return new Symbol( sym.OPEN_BRACKET );
            }
            // fall through
          case 44: break;
          case 4:
            { return new Symbol( sym.CLOSE_BRACKET );
            }
            // fall through
          case 45: break;
          case 5:
            { return new Symbol( sym.MULTIPLY );
            }
            // fall through
          case 46: break;
          case 6:
            { return new Symbol( sym.PLUS );
            }
            // fall through
          case 47: break;
          case 7:
            { return new Symbol( sym.INTCONST, Integer.parseInt( yytext() ) );
            }
            // fall through
          case 48: break;
          case 8:
            { return new Symbol( sym.SEMICOLON );
            }
            // fall through
          case 49: break;
          case 9:
            { return new Symbol( sym.ASSIGN );
            }
            // fall through
          case 50: break;
          case 10:
            { return new Symbol( sym.ID, yytext() );
            }
            // fall through
          case 51: break;
          case 11:
            { return new Symbol( sym.OPEN_CURLY_BRACKET );
            }
            // fall through
          case 52: break;
          case 12:
            { return new Symbol( sym.CLOSE_CURLY_BRACKET );
            }
            // fall through
          case 53: break;
          case 13:
            { return new Symbol( sym.IF );
            }
            // fall through
          case 54: break;
          case 14:
            { return new Symbol( sym.STRINGCONST, yytext() );
            }
            // fall through
          case 55: break;
          case 15:
            { return new Symbol( sym.CHARCONST, yytext() );
            }
            // fall through
          case 56: break;
          case 16:
            { return new Symbol( sym.DOUBLECONST, Double.parseDouble( yytext() ) );
            }
            // fall through
          case 57: break;
          case 17:
            { return new Symbol( sym.INT );
            }
            // fall through
          case 58: break;
          case 18:
            { return new Symbol( sym.BOOL );
            }
            // fall through
          case 59: break;
          case 19:
            { return new Symbol( sym.CHAR );
            }
            // fall through
          case 60: break;
          case 20:
            { return new Symbol( sym.LESS );
            }
            // fall through
          case 61: break;
          case 21:
            { return new Symbol( sym.THEN );
            }
            // fall through
          case 62: break;
          case 22:
            { return new Symbol( sym.BOOLCONST, Boolean.parseBoolean( yytext() ) );
            }
            // fall through
          case 63: break;
          case 23:
            { return new Symbol( sym.EQUAL );
            }
            // fall through
          case 64: break;
          case 24:
            { return new Symbol( sym.SCALE );
            }
            // fall through
          case 65: break;
          case 25:
            { yybegin( COMMENT );
            }
            // fall through
          case 66: break;
          case 26:
            { return new Symbol( sym.DOUBLE );
            }
            // fall through
          case 67: break;
          case 27:
            { return new Symbol( sym.REPEAT );
            }
            // fall through
          case 68: break;
          case 28:
            { return new Symbol( sym.STRING );
            }
            // fall through
          case 69: break;
          case 29:
            { yybegin( YYINITIAL );
            }
            // fall through
          case 70: break;
          case 30:
            { return new Symbol( sym.GREATER );
            }
            // fall through
          case 71: break;
          case 31:
            { return new Symbol( sym.SERVICE_BEGIN );
            }
            // fall through
          case 72: break;
          case 32:
            { return new Symbol( sym.OPTIMIZE );
            }
            // fall through
          case 73: break;
          case 33:
            { return new Symbol( sym.STRATEGY_BEGIN );
            }
            // fall through
          case 74: break;
          case 34:
            { return new Symbol( sym.SERVICE_END );
            }
            // fall through
          case 75: break;
          case 35:
            { return new Symbol( sym.STRATEGY_END );
            }
            // fall through
          case 76: break;
          case 36:
            { return new Symbol( sym.EXECUTED_BY );
            }
            // fall through
          case 77: break;
          case 37:
            { return new Symbol( sym.REDEPLOY_ON );
            }
            // fall through
          case 78: break;
          case 38:
            { return new Symbol( sym.DECLARATION_BEGIN );
            }
            // fall through
          case 79: break;
          case 39:
            { return new Symbol( sym.SERVICE_NAME );
            }
            // fall through
          case 80: break;
          case 40:
            { return new Symbol( sym.NUM_INSTANCES );
            }
            // fall through
          case 81: break;
          case 41:
            { return new Symbol( sym.DECLARATION_END );
            }
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
