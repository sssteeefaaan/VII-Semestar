
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 16 01:43:00 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Dec 16 01:43:00 CET 2021
  */
public class MPParserWithHelp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParserWithHelp() {super();}

  /** Constructor which sets the default scanner. */
  public MPParserWithHelp(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\005\005\000\002\005\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
    "\011\005\000\002\011\005\000\002\011\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\013\003\000\002\013\003\000\002" +
    "\015\011\000\002\015\011\000\002\015\010\000\002\015" +
    "\007\000\002\015\006\000\002\015\005\000\002\015\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\003\000" +
    "\002\020\003\000\002\020\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\004\000\002\022\004\000\002\022\004" +
    "\000\002\007\005\000\002\007\005\000\002\007\004\000" +
    "\002\007\003\000\002\023\010\000\002\023\010\000\002" +
    "\023\007\000\002\023\006\000\002\023\005\000\002\023" +
    "\004\000\002\024\004\000\002\024\004\000\002\025\004" +
    "\000\002\025\004\000\002\026\006\000\002\026\006\000" +
    "\002\026\005\000\002\026\004\000\002\027\003\000\002" +
    "\030\004\000\002\030\004\000\002\030\004\000\002\030" +
    "\004\000\002\030\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\004\000" +
    "\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\004\004\001\002\000\006\003\007\006" +
    "\012\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufffe\001\002\000\010\003\037\010" +
    "\036\017\042\001\002\000\006\003\034\005\035\001\002" +
    "\000\016\003\021\012\014\013\020\014\017\015\016\016" +
    "\022\001\002\000\006\003\031\010\030\001\002\000\006" +
    "\003\ufff2\010\ufff2\001\002\000\006\007\ufff6\011\ufff6\001" +
    "\002\000\006\003\uffef\010\uffef\001\002\000\006\003\ufff0" +
    "\010\ufff0\001\002\000\006\003\ufff1\010\ufff1\001\002\000" +
    "\010\003\ufff9\010\ufff9\017\ufff9\001\002\000\006\003\uffee" +
    "\010\uffee\001\002\000\006\007\024\011\025\001\002\000" +
    "\010\003\ufffa\010\ufffa\017\ufffa\001\002\000\016\003\026" +
    "\012\014\013\020\014\017\015\016\016\022\001\002\000" +
    "\006\007\ufff7\011\ufff7\001\002\000\006\007\ufff8\011\ufff8" +
    "\001\002\000\006\003\033\011\032\001\002\000\006\007" +
    "\ufff3\011\ufff3\001\002\000\006\007\ufff5\011\ufff5\001\002" +
    "\000\006\007\ufff4\011\ufff4\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002\000\006\003\147\030\150" +
    "\001\002\000\006\003\ufffb\005\ufffb\001\002\000\012\003" +
    "\uffeb\011\uffeb\023\uffeb\032\uffeb\001\002\000\012\003\uffea" +
    "\011\uffea\023\uffea\032\uffea\001\002\000\006\003\134\020" +
    "\133\001\002\000\012\003\uffe9\011\uffe9\023\uffe9\032\uffe9" +
    "\001\002\000\010\003\047\011\046\032\051\001\002\000" +
    "\010\003\130\005\ufffd\011\127\001\002\000\010\003\125" +
    "\010\036\017\042\001\002\000\006\003\ufffc\005\ufffc\001" +
    "\002\000\010\003\uffd1\005\uffd1\011\uffd1\001\002\000\006" +
    "\003\052\034\054\001\002\000\010\003\uffcb\005\uffcb\011" +
    "\uffcb\001\002\000\006\003\060\031\057\001\002\000\006" +
    "\003\056\010\055\001\002\000\006\003\uffca\031\uffca\001" +
    "\002\000\006\003\uffc9\031\uffc9\001\002\000\010\003\124" +
    "\010\072\024\073\001\002\000\010\003\uffcc\005\uffcc\011" +
    "\uffcc\001\002\000\006\003\062\035\064\001\002\000\010" +
    "\003\uffcd\005\uffcd\011\uffcd\001\002\000\006\003\067\036" +
    "\071\001\002\000\006\003\066\010\065\001\002\000\006" +
    "\003\uffc8\036\uffc8\001\002\000\006\003\uffc7\036\uffc7\001" +
    "\002\000\010\003\uffce\005\uffce\011\uffce\001\002\000\006" +
    "\003\121\033\122\001\002\000\010\003\076\010\072\024" +
    "\073\001\002\000\034\003\uffde\011\uffde\021\uffde\023\uffde" +
    "\025\uffde\026\uffde\027\uffde\032\uffde\033\uffde\035\uffde\037" +
    "\uffde\043\uffde\044\uffde\001\002\000\034\003\uffdd\011\uffdd" +
    "\021\uffdd\023\uffdd\025\uffdd\026\uffdd\027\uffdd\032\uffdd\033" +
    "\uffdd\035\uffdd\037\uffdd\043\uffdd\044\uffdd\001\002\000\006" +
    "\003\uffc2\037\uffc2\001\002\000\014\003\uffdf\025\116\026" +
    "\115\027\114\037\uffdf\001\002\000\006\003\uffc3\033\uffc3" +
    "\001\002\000\006\003\100\037\101\001\002\000\006\003" +
    "\uffc4\033\uffc4\001\002\000\012\003\102\040\106\041\104" +
    "\042\105\001\002\000\006\003\uffc5\033\uffc5\001\002\000" +
    "\006\003\uffc6\033\uffc6\001\002\000\006\003\112\010\111" +
    "\001\002\000\006\003\uffbd\033\uffbd\001\002\000\010\003" +
    "\110\010\072\024\073\001\002\000\006\003\uffc1\033\uffc1" +
    "\001\002\000\006\003\uffc0\033\uffc0\001\002\000\006\003" +
    "\uffbf\033\uffbf\001\002\000\006\003\uffbe\033\uffbe\001\002" +
    "\000\010\003\120\010\072\024\073\001\002\000\010\003" +
    "\uffda\010\uffda\024\uffda\001\002\000\010\003\uffdb\010\uffdb" +
    "\024\uffdb\001\002\000\010\003\uffdc\010\uffdc\024\uffdc\001" +
    "\002\000\006\003\uffe1\037\uffe1\001\002\000\006\003\uffe0" +
    "\037\uffe0\001\002\000\010\003\uffcf\005\uffcf\011\uffcf\001" +
    "\002\000\010\003\uffd0\005\uffd0\011\uffd0\001\002\000\006" +
    "\003\uffd6\035\uffd6\001\002\000\006\003\uffd5\035\uffd5\001" +
    "\002\000\012\003\uffec\011\uffec\023\uffec\032\uffec\001\002" +
    "\000\012\003\uffed\011\uffed\023\uffed\032\uffed\001\002\000" +
    "\006\003\131\032\051\001\002\000\010\003\uffd2\005\uffd2" +
    "\011\uffd2\001\002\000\010\003\uffd3\005\uffd3\011\uffd3\001" +
    "\002\000\010\003\uffd4\005\uffd4\011\uffd4\001\002\000\010" +
    "\003\136\010\072\024\073\001\002\000\012\003\uffe2\011" +
    "\uffe2\023\uffe2\032\uffe2\001\002\000\006\003\137\021\140" +
    "\001\002\000\012\003\uffe3\011\uffe3\023\uffe3\032\uffe3\001" +
    "\002\000\012\003\uffe4\011\uffe4\023\uffe4\032\uffe4\001\002" +
    "\000\006\003\142\022\141\001\002\000\010\003\143\010" +
    "\036\017\042\001\002\000\012\003\uffe5\011\uffe5\023\uffe5" +
    "\032\uffe5\001\002\000\012\003\uffe6\011\uffe6\023\uffe6\032" +
    "\uffe6\001\002\000\010\003\145\011\046\023\146\001\002" +
    "\000\012\003\uffe7\011\uffe7\023\uffe7\032\uffe7\001\002\000" +
    "\012\003\uffe8\011\uffe8\023\uffe8\032\uffe8\001\002\000\012" +
    "\003\uffd7\011\uffd7\023\uffd7\032\uffd7\001\002\000\010\003" +
    "\152\010\072\024\073\001\002\000\016\003\uffb7\011\uffb7" +
    "\023\uffb7\032\uffb7\043\uffb7\044\uffb7\001\002\000\012\003" +
    "\uffd8\011\uffd8\023\uffd8\032\uffd8\001\002\000\016\003\154" +
    "\011\uffd9\023\uffd9\032\uffd9\043\155\044\156\001\002\000" +
    "\016\003\uffb8\011\uffb8\023\uffb8\032\uffb8\043\uffb8\044\uffb8" +
    "\001\002\000\010\003\162\010\072\024\073\001\002\000" +
    "\010\003\160\010\072\024\073\001\002\000\016\003\uffbb" +
    "\011\uffbb\023\uffbb\032\uffbb\043\uffbb\044\uffbb\001\002\000" +
    "\016\003\uffb9\011\uffb9\023\uffb9\032\uffb9\043\uffb9\044\uffb9" +
    "\001\002\000\016\003\uffbc\011\uffbc\023\uffbc\032\uffbc\043" +
    "\uffbc\044\uffbc\001\002\000\016\003\uffba\011\uffba\023\uffba" +
    "\032\uffba\043\uffba\044\uffba\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\003\004\001\001\000\006\004\010\005" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\043\013\037\014\040\015\042\001" +
    "\001\000\002\001\001\000\010\010\022\011\014\012\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\026\012\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\044\023\047\001\001\000\002\001" +
    "\001\000\010\013\125\014\040\015\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\052\001\001\000" +
    "\002\001\001\000\004\022\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\122\001" +
    "\001\000\002\001\001\000\004\025\062\001\001\000\002" +
    "\001\001\000\004\026\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\073\020\074\027\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\143\013\037\014\040\015\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\150\021" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\160\001\001\000" +
    "\004\020\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParserWithHelp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParserWithHelp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParserWithHelp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public int errorNumber = 0;

    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new MPLexer( file );
            MPParserWithHelp parser = new MPParserWithHelp( scanner );
			parser.parse();
			
			if ( parser.errorNumber == 0)
				System.out.println( "Analiza je zavrsena. U kodu nema sintaksnih gresaka!" );
			else
				System.out.println( "Analiza je zavrsena. Broj sintaksnih gresaka: " + parser.errorNumber );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public void syntax_error(Symbol current_token)
    {

    }

    public void report_error(String message, Object info)
    {
        System.out.println( message );
    }

    public int getLine()
    {
        return ( ( MPLexer ) getScanner() ).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParserWithHelp$actions {
  private final MPParserWithHelp parser;

  /** Constructor */
  CUP$MPParserWithHelp$actions(MPParserWithHelp parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParserWithHelp$do_action(
    int                        CUP$MPParserWithHelp$act_num,
    java_cup.runtime.lr_parser CUP$MPParserWithHelp$parser,
    java.util.Stack            CUP$MPParserWithHelp$stack,
    int                        CUP$MPParserWithHelp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParserWithHelp$result;

      /* select the action based on the action number */
      switch (CUP$MPParserWithHelp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 38 => Expression!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= Expression error 
            {
              Object RESULT = null;
		
    System.out.println("Ocekuje se operator u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression ::= Expression MULTIPLY error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje drugi operand u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expression ::= Expression PLUS error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje drugi operand u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expression ::= Expression MULTIPLY Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 36 => Expression add!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expression ::= Expression PLUS Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 36 => Expression add!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Response ::= OPTIMIZE 
            {
              Object RESULT = null;
		
    System.out.println("Smena 35 => Response optimize!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(22/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Response ::= REDEPLOY_ON error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje identifikator u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(22/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Response ::= REDEPLOY_ON ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).value;
		
    System.out.println("Smena 34 => Response redeploy on '" + id + "'!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(22/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Response ::= SCALE error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisan term u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(22/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Response ::= SCALE Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 33 => Response scale!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(22/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Condition ::= RelExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 32 => Condition!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(21/*Condition*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AdaptationRule ::= IF error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilan uslov u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(20/*AdaptationRule*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AdaptationRule ::= IF Condition error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje kljucna rec 'then' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(20/*AdaptationRule*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AdaptationRule ::= IF Condition THEN error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje response u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(20/*AdaptationRule*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AdaptationRule ::= IF Condition THEN Response 
            {
              Object RESULT = null;
		
    System.out.println("Smena 31 => AdaptationRule!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(20/*AdaptationRule*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Allocation ::= EXECUTED_BY error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje identifikator u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(19/*Allocation*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Allocation ::= EXECUTED_BY ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).value;
		
    System.out.println("Smena 30 => Allocation executed by '" + id + "'!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(19/*Allocation*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ServiceName ::= SERVICE_NAME error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje identifikator u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(18/*ServiceName*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ServiceName ::= SERVICE_NAME ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).value;
		
    System.out.println("Smena 29 => ServiceName '" + id + "'!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(18/*ServiceName*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ServiceDef ::= SERVICE_BEGIN error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje nepravilna definicija imena servisa u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(17/*ServiceDef*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ServiceDef ::= SERVICE_BEGIN ServiceName error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilna instanca u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(17/*ServiceDef*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ServiceDef ::= SERVICE_BEGIN ServiceName Instances error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilna alokacija  u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(17/*ServiceDef*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ServiceDef ::= SERVICE_BEGIN ServiceName Instances Allocation error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno adaptaciono pravilo u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(17/*ServiceDef*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ServiceDef ::= SERVICE_BEGIN ServiceName Instances Allocation AdaptationRule error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje '~service' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(17/*ServiceDef*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ServiceDef ::= SERVICE_BEGIN ServiceName Instances Allocation AdaptationRule SERVICE_END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 28 => ServiceDef!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(17/*ServiceDef*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ServiceList ::= ServiceDef 
            {
              Object RESULT = null;
		
    System.out.println("Smena 27 => ServiceList!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(5/*ServiceList*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ServiceList ::= ServiceList error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje ';' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(5/*ServiceList*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ServiceList ::= ServiceList SEMICOLON error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilna definicija servisa u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(5/*ServiceList*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ServiceList ::= ServiceList SEMICOLON ServiceDef 
            {
              Object RESULT = null;
		
    System.out.println("Smena 26 => ServiceList!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(5/*ServiceList*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instances ::= NUM_INSTANCES error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisana instanca  u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(16/*Instances*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instances ::= NUM_INSTANCES Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 25 => Instances!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(16/*Instances*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Assignment ::= ID error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje '=' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(10/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Assignment ::= ID ASSIGN error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje expression u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(10/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Assignment ::= ID ASSIGN Expression 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).value;
		
    System.out.println("Smena 24 => Assignment to '" + id + "'!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(10/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RelOp ::= GREATER 
            {
              Object RESULT = null;
		
    System.out.println("Smena 23 => RelOp greater!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RelOp ::= EQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 22 => RelOp equal!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RelOp ::= LESS 
            {
              Object RESULT = null;
		
    System.out.println("Smena 21 => RelOp less!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Term ::= CONST 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).value;
		
    System.out.println("Smena 20 => Term CONST '" + c + "'!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Term ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).value;
		
    System.out.println("Smena 19 => Term ID '" + id + "'!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RelExpression ::= Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 18 => RelExpression!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelExpression ::= Term RelOp error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje term u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 17 => RelExpression!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WhileStatement ::= REPEAT error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje '(' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WhileStatement ::= REPEAT OPEN_BRACKET error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilno definisan term u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WhileStatement ::= REPEAT OPEN_BRACKET Term error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje ')' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WhileStatement ::= REPEAT OPEN_BRACKET Term CLOSE_BRACKET error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje '{' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WhileStatement ::= REPEAT OPEN_BRACKET Term CLOSE_BRACKET OPEN_CURLY_BRACKET error 
            {
              Object RESULT = null;
		
    System.out.println("Nepravilne dodele u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WhileStatement ::= REPEAT OPEN_BRACKET Term CLOSE_BRACKET OPEN_CURLY_BRACKET Statements error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaju '}' u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WhileStatement ::= REPEAT OPEN_BRACKET Term CLOSE_BRACKET OPEN_CURLY_BRACKET Statements CLOSE_CURLY_BRACKET 
            {
              Object RESULT = null;
		
    System.out.println("Smena 16 => WhileStatement!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= WhileStatement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 15 => Statement!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= Assignment 
            {
              Object RESULT = null;
		
    System.out.println("Smena 14 => Statement!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statements ::= Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 13 => Statements!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(4/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statements ::= Statements SEMICOLON error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje dodela u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(4/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statements ::= Statements SEMICOLON Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 12 => Statements!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(4/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= CHAR 
            {
              Object RESULT = null;
		
    System.out.println("Smena 11 => Type char!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= BOOL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 10 => Type bool!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Object RESULT = null;
		
    System.out.println("Smena 9 => Type string!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              Object RESULT = null;
		
    System.out.println("Smena 8 => Type double!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= INT 
            {
              Object RESULT = null;
		
    System.out.println("Smena 7 => Type int!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Variable ::= Type error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje identifikator u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(7/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Variable ::= Type ID error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje ; u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(7/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Variable ::= Type ID SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).value;
		
    System.out.println("Smena 6 => Variable '" + id + "'!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(7/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableDeclaration ::= Variable 
            {
              Object RESULT = null;
		
    System.out.println("Smena 5 => VariableDeclaration!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(6/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDeclaration ::= VariableDeclaration SEMICOLON error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje promenljiva u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(6/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
              Object RESULT = null;
		
    System.out.println("Smena 4 => VariableDeclaration!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(6/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declarations ::= DECLARATION_BEGIN error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaju deklaracije promenljivih u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declarations ::= DECLARATION_BEGIN VariableDeclaration DECLARATION_END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 3 => Declarations!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Body ::= Declarations error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaju dodele u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(2/*Body*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Body ::= Declarations Statements error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje lista serivisa u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(2/*Body*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Body ::= Declarations Statements ServiceList 
            {
              Object RESULT = null;
		
    System.out.println("Smena 2 => Body!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(2/*Body*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Strategy ::= STRATEGY_BEGIN error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje body u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(1/*Strategy*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Strategy ::= STRATEGY_BEGIN Body error 
            {
              Object RESULT = null;
		
    System.out.println("Nedostaje ~strategy u liniji " + parser.getLine() + "!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(1/*Strategy*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Strategy ::= STRATEGY_BEGIN Body STRATEGY_END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 1 => Strategy!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(1/*Strategy*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Strategy EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).value;
		RESULT = start_val;
              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParserWithHelp$parser.done_parsing();
          return CUP$MPParserWithHelp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

