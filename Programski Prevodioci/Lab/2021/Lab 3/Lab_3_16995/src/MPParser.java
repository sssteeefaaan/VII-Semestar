
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 16 01:42:57 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Dec 16 01:42:57 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\003\005\000\002\004" +
    "\005\000\002\005\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\006\005\000\002\006\003\000\002\013\003\000\002\013" +
    "\003\000\002\015\011\000\002\016\005\000\002\016\003" +
    "\000\002\020\003\000\002\020\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\014\005\000\002" +
    "\022\004\000\002\007\005\000\002\007\003\000\002\023" +
    "\010\000\002\024\004\000\002\025\004\000\002\026\006" +
    "\000\002\027\003\000\002\030\004\000\002\030\004\000" +
    "\002\030\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\004\004\001\002\000\004\006\011\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\010\030\017\033\001\002\000\004\005\027\001" +
    "\002\000\014\012\021\013\015\014\013\015\017\016\020" +
    "\001\002\000\004\010\025\001\002\000\004\010\ufff8\001" +
    "\002\000\006\007\022\011\023\001\002\000\004\010\ufff9" +
    "\001\002\000\006\007\ufffc\011\ufffc\001\002\000\004\010" +
    "\ufff7\001\002\000\004\010\ufff6\001\002\000\004\010\ufffa" +
    "\001\002\000\006\010\ufffe\017\ufffe\001\002\000\014\012" +
    "\021\013\015\014\013\015\017\016\020\001\002\000\006" +
    "\007\ufffd\011\ufffd\001\002\000\004\011\026\001\002\000" +
    "\006\007\ufffb\011\ufffb\001\002\000\004\002\000\001\002" +
    "\000\004\030\110\001\002\000\010\011\ufff4\023\ufff4\032" +
    "\ufff4\001\002\000\010\011\ufff3\023\ufff3\032\ufff3\001\002" +
    "\000\004\020\102\001\002\000\010\011\ufff2\023\ufff2\032" +
    "\ufff2\001\002\000\006\011\037\032\040\001\002\000\006" +
    "\005\uffff\011\100\001\002\000\006\010\030\017\033\001" +
    "\002\000\004\034\043\001\002\000\006\005\uffe6\011\uffe6" +
    "\001\002\000\004\031\045\001\002\000\004\010\044\001" +
    "\002\000\004\031\uffe4\001\002\000\006\010\056\024\054" +
    "\001\002\000\004\035\050\001\002\000\004\036\053\001" +
    "\002\000\004\010\051\001\002\000\004\036\uffe3\001\002" +
    "\000\004\033\075\001\002\000\006\010\056\024\054\001" +
    "\002\000\032\011\uffed\021\uffed\023\uffed\025\uffed\026\uffed" +
    "\027\uffed\032\uffed\033\uffed\035\uffed\037\uffed\043\uffed\044" +
    "\uffed\001\002\000\004\037\uffe1\001\002\000\032\011\uffee" +
    "\021\uffee\023\uffee\025\uffee\026\uffee\027\uffee\032\uffee\033" +
    "\uffee\035\uffee\037\uffee\043\uffee\044\uffee\001\002\000\012" +
    "\025\073\026\072\027\071\037\uffef\001\002\000\004\037" +
    "\061\001\002\000\010\040\065\041\063\042\064\001\002" +
    "\000\004\033\uffe2\001\002\000\004\010\067\001\002\000" +
    "\004\033\uffde\001\002\000\006\010\056\024\054\001\002" +
    "\000\004\033\uffe0\001\002\000\004\033\uffdf\001\002\000" +
    "\006\010\056\024\054\001\002\000\006\010\uffea\024\uffea" +
    "\001\002\000\006\010\uffeb\024\uffeb\001\002\000\006\010" +
    "\uffec\024\uffec\001\002\000\004\037\ufff0\001\002\000\006" +
    "\005\uffe5\011\uffe5\001\002\000\004\035\uffe8\001\002\000" +
    "\010\011\ufff5\023\ufff5\032\ufff5\001\002\000\004\032\040" +
    "\001\002\000\006\005\uffe7\011\uffe7\001\002\000\006\010" +
    "\056\024\054\001\002\000\004\021\104\001\002\000\004" +
    "\022\105\001\002\000\006\010\030\017\033\001\002\000" +
    "\006\011\037\023\107\001\002\000\010\011\ufff1\023\ufff1" +
    "\032\ufff1\001\002\000\006\010\056\024\054\001\002\000" +
    "\014\011\uffdb\023\uffdb\032\uffdb\043\uffdb\044\uffdb\001\002" +
    "\000\014\011\uffe9\023\uffe9\032\uffe9\043\113\044\114\001" +
    "\002\000\006\010\056\024\054\001\002\000\006\010\056" +
    "\024\054\001\002\000\014\011\uffdc\023\uffdc\032\uffdc\043" +
    "\uffdc\044\uffdc\001\002\000\014\011\uffdd\023\uffdd\032\uffdd" +
    "\043\uffdd\044\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\003\004\001\001\000\006\004\007\005" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\034\013\030\014\031\015\033\001\001\000\002\001" +
    "\001\000\010\010\013\011\015\012\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\023\012" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\035\023\040\001\001\000\002\001\001\000" +
    "\010\013\076\014\031\015\033\001\001\000\004\024\041" +
    "\001\001\000\002\001\001\000\004\022\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\075\001\001" +
    "\000\004\025\046\001\001\000\004\026\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\054\020\056\027\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\067\001\001" +
    "\000\002\001\001\000\004\030\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\100\001\001\000\002" +
    "\001\001\000\004\020\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\105\013\030\014\031\015\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\110\021\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\115\001\001\000\004\020\114\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new MPLexer( file );
            MPParser parser = new MPParser( scanner );
			Symbol syntax_tree = parser.parse();
			System.out.println(syntax_tree);
			System.out.println(syntax_tree.value);
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 38 => Expression!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression MULTIPLY Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 37 => Expression multiply!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression PLUS Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 36 => Expression add!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Response ::= OPTIMIZE 
            {
              Object RESULT = null;
		
    System.out.println("Smena 35 => Response optimize!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(22/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Response ::= REDEPLOY_ON ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 34 => Response redeploy on '" + id + "'!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(22/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Response ::= SCALE Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 33 => Response scale!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(22/*Response*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condition ::= RelExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 32 => Condition!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(21/*Condition*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AdaptationRule ::= IF Condition THEN Response 
            {
              Object RESULT = null;
		
    System.out.println("Smena 31 => AdaptationRule!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(20/*AdaptationRule*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Allocation ::= EXECUTED_BY ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 30 => Allocation executed by '" + id + "'!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(19/*Allocation*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ServiceName ::= SERVICE_NAME ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 29 => ServiceName '" + id + "'!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(18/*ServiceName*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ServiceDef ::= SERVICE_BEGIN ServiceName Instances Allocation AdaptationRule SERVICE_END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 28 => ServiceDef!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*ServiceDef*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ServiceList ::= ServiceDef 
            {
              Object RESULT = null;
		
    System.out.println("Smena 27 => ServiceList!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*ServiceList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ServiceList ::= ServiceList SEMICOLON ServiceDef 
            {
              Object RESULT = null;
		
    System.out.println("Smena 26 => ServiceList!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*ServiceList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instances ::= NUM_INSTANCES Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 25 => Instances!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Instances*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assignment ::= ID ASSIGN Expression 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
    System.out.println("Smena 24 => Assignment to '" + id + "'!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelOp ::= GREATER 
            {
              Object RESULT = null;
		
    System.out.println("Smena 23 => RelOp greater!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RelOp ::= EQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 22 => RelOp equal!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RelOp ::= LESS 
            {
              Object RESULT = null;
		
    System.out.println("Smena 21 => RelOp less!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Term ::= CONST 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 20 => Term CONST '" + c + "'!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Term ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 19 => Term ID '" + id + "'!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RelExpression ::= Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 18 => RelExpression!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 17 => RelExpression!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // WhileStatement ::= REPEAT OPEN_BRACKET Term CLOSE_BRACKET OPEN_CURLY_BRACKET Statements CLOSE_CURLY_BRACKET 
            {
              Object RESULT = null;
		
    System.out.println("Smena 16 => WhileStatement!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*WhileStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= WhileStatement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 15 => Statement!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= Assignment 
            {
              Object RESULT = null;
		
    System.out.println("Smena 14 => Statement!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statements ::= Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 13 => Statements!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statements ::= Statements SEMICOLON Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 12 => Statements!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= CHAR 
            {
              Object RESULT = null;
		
    System.out.println("Smena 11 => Type char!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 10 => Type bool!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= STRING 
            {
              Object RESULT = null;
		
    System.out.println("Smena 9 => Type string!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= DOUBLE 
            {
              Object RESULT = null;
		
    System.out.println("Smena 8 => Type double!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              Object RESULT = null;
		
    System.out.println("Smena 7 => Type int!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variable ::= Type ID SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    System.out.println("Smena 6 => Variable '" + id + "'!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VariableDeclaration ::= Variable 
            {
              Object RESULT = null;
		
    System.out.println("Smena 5 => VariableDeclaration!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
              Object RESULT = null;
		
    System.out.println("Smena 4 => VariableDeclaration!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= DECLARATION_BEGIN VariableDeclaration DECLARATION_END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 3 => Declarations!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= Declarations Statements ServiceList 
            {
              Object RESULT = null;
		
    System.out.println("Smena 2 => Body!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Body*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Strategy ::= STRATEGY_BEGIN Body STRATEGY_END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 1 => Strategy!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Strategy*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Strategy EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

